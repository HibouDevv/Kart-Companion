(()=>{const e="1DjhyyKWT5fAAG2bN2i2dW5iv6DCdulOZZHcoovSnelg";window.sheetsSync={saveStats:async function(t,s){try{// console.log("[SKMT][SYNC] Starting sync for SKID:",t,"Stats:",s);
if(!t||"Default"===t)throw new Error("Invalid SKID: "+t);if(!s||"object"!=typeof s)throw new Error("Invalid stats object: "+JSON.stringify(s));// console.log("[SKMT][SYNC] Attempting to read sheet...");
const o=await gapi.client.sheets.spreadsheets.values.get({spreadsheetId:e,range:"Stats!A:E"});if(!o.result)throw console.error("[SKMT][SYNC] Error reading sheet:",o),new Error("Failed to read sheet");const r=o.result;// console.log("[SKMT][SYNC] Sheet data read successfully:",r);
const n=r.values?r.values.findIndex((e=>e[0]===t)):-1;// console.log("[SKMT][SYNC] Row index for SKID:",n);
let a=0;if("string"==typeof s.totalTimeSpent){// console.log("[SKMT][SYNC] Converting time string:",s.totalTimeSpent);
const match=s.totalTimeSpent.match(/(?:(\d+)h)?\s*(?:(\d+)m)?\s*(?:(\d+)s)?/);if(match){const hours=parseInt(match[1]||0);a=3600*hours+60*parseInt(match[2]||0)+parseInt(match[3]||0);// console.log("[SKMT][SYNC] Converted time to seconds:",a);}}else a=s.totalTimeSpent||0;const l=[t,s.kills||0,s.deaths||0,s.totalGames||0,a];// console.log("[SKMT][SYNC] Prepared values:",l);
if(-1===n){// console.log("[SKMT][SYNC] Adding new row for SKID:",t);
const res=await gapi.client.sheets.spreadsheets.values.append({spreadsheetId:e,range:"Stats!A:E",valueInputOption:"RAW",resource:{values:[l]}});if(!res.result)throw console.error("[SKMT][SYNC] Error appending row:",res),new Error("Failed to append row");// console.log("[SKMT][SYNC] Successfully appended new row");}else{// console.log("[SKMT][SYNC] Updating row for SKID:",t,"at index:",n);
const res=await gapi.client.sheets.spreadsheets.values.update({spreadsheetId:e,range:`Stats!A${n+1}:E${n+1}`,valueInputOption:"RAW",resource:{values:[l]}});if(!res.result)throw console.error("[SKMT][SYNC] Error updating row:",res),new Error("Failed to update row");// console.log("[SKMT][SYNC] Successfully updated existing row");}return console.log("[SKMT][SYNC] Sync completed successfully"),!0}catch(e){return console.error("[SKMT][SYNC] Error in saveStatsToSheets:",e),!1}},loadStats:async function(t){try{// console.log("[SKMT][SYNC] Loading stats for SKID:",t);
const res=await gapi.client.sheets.spreadsheets.values.get({spreadsheetId:e,range:"Stats!A:E"});if(!res.result||!res.result.values)return console.error("[SKMT][SYNC] No data found in sheet"),null;const idx=res.result.values.findIndex((e=>e[0]===t));if(-1===idx)return null;const row=res.result.values[idx];// console.log("[SKMT][SYNC] Found stats row:",row);
const n=row[3]||"0s";let a=0;const l=n.match(/(\d+)h/);l&&(a+=3600*parseInt(l[1]));const c=n.match(/(\d+)m/);c&&(a+=60*parseInt(c[1]));const S=n.match(/(\d+)s/);return S&&(a+=parseInt(S[1])),{kills:parseInt(row[1])||0,deaths:parseInt(row[2])||0,totalTimeSpent:a,totalGames:parseInt(row[4])||0}}catch(e){return console.error("[SKMT][SYNC] Error loading stats:",e),null}}}})();