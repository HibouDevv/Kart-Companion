(()=>{document.getElementById("kills"),document.getElementById("deaths"),document.getElementById("matches"),document.getElementById("matches-list");const t=document.getElementById("statsBtn"),e=document.getElementById("hudBtn"),a=document.getElementById("statsSection"),s=document.getElementById("hudSection");a.classList.add("active"),t.addEventListener("click",(()=>{t.classList.add("selected"),e.classList.remove("selected"),a.style.display="block",s.style.display="none"})),e.addEventListener("click",(()=>{e.classList.add("selected"),t.classList.remove("selected"),a.style.display="none",s.style.display="block"}));const n=document.getElementById("toggleDeathsHud"),o=document.getElementById("toggleKillStreakHud");function l(t){return t?new Date(t).toLocaleString(void 0,{hour:"2-digit",minute:"2-digit",second:"2-digit",year:"2-digit",month:"2-digit",day:"2-digit"}):"-"}function i(t,e){return 0===e?t>0?t.toFixed(2):"0.00":(t/e).toFixed(2)}function c(t){const e=Math.floor(t/1e3),a=Math.floor(e/3600),s=Math.floor(e%3600/60),n=e%60;return a>0?`${a}h ${s}m ${n}s`:s>0?`${s}m ${n}s`:`${n}s`}n.addEventListener("change",(function(){const t=this.checked;chrome.storage.sync.set({deathsHudEnabled:t}),chrome.tabs.query({active:!0,currentWindow:!0},(e=>{chrome.tabs.sendMessage(e[0].id,{type:"toggle-deaths-hud",enabled:t})}))})),o.addEventListener("change",(function(){const t=this.checked;chrome.storage.sync.set({killStreakHudEnabled:t}),chrome.tabs.query({active:!0,currentWindow:!0},(e=>{chrome.tabs.sendMessage(e[0].id,{type:"toggle-killstreak-hud",enabled:t})}))})),chrome.storage.sync.get(["deathsHudEnabled","killStreakHudEnabled"],(t=>{n.checked=!1!==t.deathsHudEnabled,o.checked=!1!==t.killStreakHudEnabled,chrome.tabs.query({active:!0,currentWindow:!0},(t=>{chrome.tabs.sendMessage(t[0].id,{type:"toggle-deaths-hud",enabled:n.checked}),chrome.tabs.sendMessage(t[0].id,{type:"toggle-killstreak-hud",enabled:o.checked})}))}));let m="Default",r="normal",d="all",h={primaryStats:!1,secondaryStats:!1,averageStats:!1,streaks:!1,quickKills:!1};function u(t,e,a){const s=a||r;return"all"===s?null:`${t}_${e}_${s}`}function p(){document.getElementById("normalModeBtn").classList.toggle("selected","normal"===r),document.getElementById("specialModeBtn").classList.toggle("selected","special"===r),document.getElementById("customModeBtn").classList.toggle("selected","custom"===r),document.getElementById("allStatsBtn").classList.toggle("selected","all"===r),document.getElementById("primaryStatsHeader").textContent="all"===r?"All Modes Primary Stats":"Primary Stats",document.getElementById("secondaryStatsHeader").textContent="all"===r?"All Modes Secondary Stats":"Secondary Stats"}function g(){chrome.storage.sync.get(["currentSkid"],(t=>{m=t.currentSkid||"Default",document.getElementById("skidValue").textContent=m;const e=["currentSkid"],a=["normal","special","custom"];e.push(`favoriteMatches_${m}`),"all"===r?a.forEach((t=>{e.push(u("matchHistory",m,t)),e.push(u("gamesJoined",m,t)),e.push(u("gamesStarted",m,t)),e.push(u("gamesQuit",m,t)),e.push(u("matchesCompleted",m,t))})):(e.push(u("matchHistory",m,r)),e.push(u("gamesJoined",m,r)),e.push(u("gamesStarted",m,r)),e.push(u("gamesQuit",m,r)),e.push(u("matchesCompleted",m,r))),console.log("[SKMT][LOAD] Loading stats for SKID:",m,"Mode:",r,"Keys:",e),chrome.storage.sync.get(e,(t=>{console.log("[SKMT][LOAD] Data returned from chrome.storage.sync:",t),B=t[`favoriteMatches_${m}`]||{},console.log("[SKMT][POPUP] Loaded favorite matches:",B),("all"===r?a:[r]).forEach((e=>{const a=u("matchHistory",m,e);t[a]&&t[a].forEach((t=>{t.favorite=!0===B[t.matchStartTime]}))})),document.querySelector(".match-history").style.display="block",function(t,e){let a=[],s=new Map;"all"===e?["normal","special","custom"].forEach((e=>{const n=t[u("matchHistory",m,e)]||[];a=a.concat(n),n.forEach((t=>{if(t.map){const e=s.get(t.map)||0;s.set(t.map,e+1)}}))})):(a=t[u("matchHistory",m,e)]||[],a.forEach((t=>{if(t.map){const e=s.get(t.map)||0;s.set(t.map,e+1)}})));const n=document.getElementById("mapFilter"),o=n.value||"all";n.innerHTML='<option value="all">All Maps</option>',Array.from(s.entries()).sort(((t,e)=>e[1]-t[1])).forEach((([t,e])=>{const a=document.createElement("option");a.value=t,a.textContent=t,n.appendChild(a)})),[...n.options].some((t=>t.value===o))?(n.value=o,d=o):(n.value="all",d="all");const r="all"===d?a:a.filter((t=>t.map===d));let h=0,p=0,y=0;r.forEach((t=>{h+=t.kills||0,p+=t.deaths||0,y+=t.duration||(t.matchEndTime&&t.matchStartTime?t.matchEndTime-t.matchStartTime:0)}));let S=0;"all"===e?["normal","special","custom"].forEach((e=>{S+=t[u("gamesQuit",m,e)]||0})):S=t[u("gamesQuit",m,e)]||0,console.log("[SKMT][DISPLAY] Current gamesQuit value:",S,"Mode:",e),document.getElementById("gamesQuit").textContent=S;const E=document.getElementById("mapsList");E.innerHTML="";const f=Array.from(s.entries()).sort(((t,e)=>e[1]-t[1]));if(f.forEach((([t,e])=>{const a=document.createElement("div");a.className="stat-card",a.innerHTML=`\n            <span class="stat-label">${t}</span>\n            <span class="stat-value">${e}</span>\n        `,E.appendChild(a)})),0===f.length){const t=document.createElement("div");t.className="no-maps",t.textContent="No maps played yet in this mode",E.appendChild(t)}let k=0,v=0,M=0,I=0,T=0,C=0,b=0,x=0,$=0,w=0,L=0,D=0,K=0,P=0,H=0,A=0,z=0,F=0,U=0,R=0,O=0,_=0;r.forEach((t=>{t.kills>I&&(I=t.kills),t.deaths>T&&(T=t.deaths);const e=t.deaths>0?t.kills/t.deaths:t.kills;e>b&&(b=e);const a=t.duration||(t.matchEndTime&&t.matchStartTime?t.matchEndTime-t.matchStartTime:0);if(a>x&&(x=a),t.killTimestamps&&t.killTimestamps.length>0){let e=0,a=0;const s=[];t.killTimestamps&&t.killTimestamps.forEach((t=>s.push({type:"kill",time:t}))),t.deathTimestamps&&t.deathTimestamps.forEach((t=>s.push({type:"death",time:t}))),s.sort(((t,e)=>t.time-e.time)),s.forEach((t=>{"death"===t.type?(e>a&&(a=e),e=0):"kill"===t.type&&(e++,e>a&&(a=e))})),a>C&&(C=a)}let s=0,n=null,o=0,l={};const i=[];t.killTimestamps&&t.killTimestamps.forEach((t=>i.push({type:"kill",time:t}))),t.deathTimestamps&&t.deathTimestamps.forEach((t=>i.push({type:"death",time:t}))),i.sort(((t,e)=>t.time-e.time)),i.forEach((t=>{"death"===t.type?(s=0,l={},o=0,n=null):"kill"===t.type&&(s++,s>=3&&!l[3]&&($++,l[3]=!0),s>=5&&!l[5]&&(w++,l[5]=!0),s>=7&&!l[7]&&(L++,l[7]=!0),s>=10&&!l[10]&&(D++,l[10]=!0),s>=15&&!l[15]&&(K++,l[15]=!0),s>=20&&!l[20]&&(P++,l[20]=!0),s>=25&&!l[25]&&(H++,l[25]=!0),s>=30&&!l[30]&&(A++,l[30]=!0),null===n?(o=1,n=t.time):(t.time-n<=4e3?(o++,2===o&&z++,3===o&&F++,4===o&&U++,5===o&&R++,6===o&&O++,7===o&&_++):o=1,n=t.time))})),t.joined&&k++,t.started&&v++,t.quit&&S++,t.quit||M++})),document.getElementById("highestKillsRecord").textContent=I,document.getElementById("highestDeathsRecord").textContent=T,document.getElementById("highestKillStreakRecord").textContent=C,document.getElementById("highestKDRRecord").textContent=b.toFixed(2),document.getElementById("longestTimePlayedRecord").textContent=c(x),document.getElementById("smashStreak").textContent=$,document.getElementById("smashtacularStreak").textContent=w,document.getElementById("smashosaurusStreak").textContent=L,document.getElementById("smashlvaniaStreak").textContent=D,document.getElementById("monsterSmashStreak").textContent=K,document.getElementById("potatoStreak").textContent=P,document.getElementById("smashSmashStreak").textContent=H,document.getElementById("potoatachioStreak").textContent=A,document.getElementById("doubleSmash").textContent=z,document.getElementById("multiSmash").textContent=F,document.getElementById("multiMegaSmash").textContent=U,document.getElementById("multiMegaUltraSmash").textContent=R,document.getElementById("gooseySmash").textContent=O,document.getElementById("crazyMultiMegaUltraSmash").textContent=_,document.getElementById("streaksHeader").textContent="all"===e?"All Modes Streaks (Without Dying)":"Streaks (Without Dying)",document.getElementById("quickKillsHeader").textContent="all"===e?"All Modes Streaks (Quick Kills)":"Streaks (Quick Kills)";const q=(M||0)+(S||0);document.getElementById("killsLabel").textContent="all"===e?"Total Kills":"Kills",document.getElementById("deathsLabel").textContent="all"===e?"Total Deaths":"Deaths",document.getElementById("kdrLabel").textContent="all"===e?"Overall KDR":"KDR",document.getElementById("matchesCompletedLabel").textContent="all"===e?"Total Matches Completed":"Matches Completed",document.getElementById("totalTimeSpentLabel").textContent="all"===e?"Total Time Played":"Time Played",document.getElementById("gamesJoinedLabel").textContent="all"===e?"Total Matches Joined":"Matches Joined",document.getElementById("totalMatchesLabel").textContent="Total Matches (Completed + Quit)",console.log("[SKMT][POPUP][DISPLAY] Updating gamesQuit display. Value:",S,"Element:",document.getElementById("gamesQuit")),document.getElementById("kills").textContent=h,document.getElementById("deaths").textContent=p,document.getElementById("kdr").textContent=i(h,p),document.getElementById("totalTimeSpent").textContent=c(y),document.getElementById("gamesJoined").textContent=k,document.getElementById("gamesStarted").textContent=v,document.getElementById("gamesQuit").textContent=S,document.getElementById("matchesCompleted").textContent=M,document.getElementById("totalMatches").textContent=q;const Q=q>0?(M||0)/q*100:0,N=q>0?(S||0)/q*100:0;document.getElementById("matchesCompletedRate").textContent=`${Q.toFixed(2)}%`,document.getElementById("matchesQuitRate").textContent=`${N.toFixed(2)}%`;const j=r.filter((t=>!t.quit)).length,J=j>0?h/j:0,V=j>0?p/j:0,W=j>0?y/j:0;document.getElementById("avgKills").textContent=J.toFixed(2),document.getElementById("avgDeaths").textContent=V.toFixed(2),document.getElementById("avgTimeSpent").textContent=c(W),document.getElementById("averageStatsHeader").textContent="all"===e?"All Modes Average Stats":"Average Stats",document.getElementById("matches-list").innerHTML="";let G=[];if("all"===e){const e=[];["normal","special","custom"].forEach((a=>{(t[u("matchHistory",m,a)]||[]).forEach((t=>{e.push({...t,mode:a})}))})),G=e}else G=a.slice().reverse();const Y=document.getElementById("matchSortSelect")?document.getElementById("matchSortSelect").value:"recent";"recent"===Y?G.sort(((t,e)=>(e.matchStartTime||0)-(t.matchStartTime||0))):"oldest"===Y?G.sort(((t,e)=>(t.matchStartTime||0)-(e.matchStartTime||0))):"kills"===Y?G.sort(((t,e)=>(e.kills||0)-(t.kills||0))):"favorites"===Y&&(G=G.filter((t=>B[t.matchStartTime])),G.sort(((t,e)=>(e.matchStartTime||0)-(t.matchStartTime||0)))),function(t){const e=document.getElementById("matches-list");e.innerHTML="",t.forEach(((a,s)=>{const n=document.createElement("div");n.className="match-card";const o=document.createElement("div");o.className="match-card-content";const r=document.createElement("div");if(r.className="match-meta",r.textContent=`#${t.length-s} | ${l(a.matchStartTime)} - ${l(a.matchEndTime)}`,o.appendChild(r),a.map){const t=document.createElement("div");t.className="match-map",t.textContent=a.map,o.appendChild(t)}const d=document.createElement("div");d.className="match-stats",d.innerHTML="",d.innerHTML+=`<span>Kills:</span><b>${a.kills}</b>`,d.innerHTML+=`<span>Deaths:</span><b>${a.deaths}</b>`,d.innerHTML+=`<span>KDR:</span><b>${i(a.kills,a.deaths)}</b>`;const h=a.duration||(a.matchEndTime&&a.matchStartTime?a.matchEndTime-a.matchStartTime:0),u=Math.floor(h/36e5),p=Math.floor(h%36e5/6e4),y=Math.floor(h%6e4/1e3);let S;S=u>0?`${u}h ${p}m ${y}s`:`${p}m ${y}s`,d.innerHTML+=`<span>Duration:</span><b>${S}</b>`,o.appendChild(d);const E=document.createElement("div");E.className="match-flags";let f=[];a.joined&&f.push("Joined"),a.started&&f.push("Started"),a.quit?f.push("Quit"):f.push("Completed"),a.isSpecialMode&&f.push("Special Mode"),a.isCustomMode&&f.push("Custom Match"),a.mode&&f.push(`${a.mode.charAt(0).toUpperCase()+a.mode.slice(1)} Mode`),f.length>0&&(E.textContent=f.join(" | ")),o.appendChild(E);const k=document.createElement("button");k.className="star-btn",k.title="Favorite this match",k.innerHTML='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><polygon points="10,2 12.59,7.36 18.51,8.09 14,12.26 15.18,18.09 10,15.27 4.82,18.09 6,12.26 1.49,8.09 7.41,7.36" stroke="#FFD700" stroke-width="1.5" fill="'+(a.favorite?"#FFD700":"white")+'"/></svg>',k.style.background="none",k.style.border="none",k.style.cursor="pointer",k.style.marginRight="4px",k.onclick=async()=>{a.favorite=!a.favorite,k.querySelector("polygon").setAttribute("fill",a.favorite?"#FFD700":"white"),a.favorite?B[a.matchStartTime]=!0:delete B[a.matchStartTime],await async function(){const t=`favoriteMatches_${m||"Default"}`;await new Promise((e=>chrome.storage.sync.set({[t]:B},e))),console.log("[SKMT][POPUP] Saved favorite matches to storage.",B)}(),"favorites"===(document.getElementById("matchSortSelect")?document.getElementById("matchSortSelect").value:"recent")&&g()};const v=document.createElement("button");v.className="info-btn",v.title="View match information",v.innerHTML='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="10" cy="10" r="9" stroke="#3498db" stroke-width="2" fill="white"/><rect x="9" y="8" width="2" height="6" rx="1" fill="#3498db"/><rect x="9" y="5" width="2" height="2" rx="1" fill="#3498db"/></svg>',v.onclick=()=>function(t){const e=document.getElementById("matchInfoModal"),a=document.getElementById("match-info-modal-body");let s=[];t.joined&&s.push("Joined"),t.started&&s.push("Started"),t.quit?s.push("Quit"):s.push("Completed"),t.isSpecialMode&&s.push("Special Mode"),t.isCustomMode&&s.push("Custom Match"),t.mode&&s.push(`${t.mode.charAt(0).toUpperCase()+t.mode.slice(1)} Mode`);const n=t.duration||(t.matchEndTime&&t.matchStartTime?t.matchEndTime-t.matchStartTime:0);let o=0,m={smashStreak:0,smashtacularStreak:0,smashosaurusStreak:0,smashlvaniaStreak:0,monsterSmashStreak:0,potatoStreak:0,smashSmashStreak:0,potoatachioStreak:0},r={doubleSmash:0,multiSmash:0,multiMegaSmash:0,multiMegaUltraSmash:0,gooseySmash:0,crazyMultiMegaUltraSmash:0};if(t.killTimestamps&&t.killTimestamps.length>0){let e=0,a=0,s=0,n=null,l={};const i=[];t.killTimestamps&&t.killTimestamps.forEach((t=>i.push({type:"kill",time:t}))),t.deathTimestamps&&t.deathTimestamps.forEach((t=>i.push({type:"death",time:t}))),i.sort(((t,e)=>t.time-e.time)),i.forEach((t=>{"death"===t.type?(e>a&&(a=e),e=0,l={},s=0,n=null):"kill"===t.type&&(e++,e>a&&(a=e),e>=3&&!l[3]&&(m.smashStreak++,l[3]=!0),e>=5&&!l[5]&&(m.smashtacularStreak++,l[5]=!0),e>=7&&!l[7]&&(m.smashosaurusStreak++,l[7]=!0),e>=10&&!l[10]&&(m.smashlvaniaStreak++,l[10]=!0),e>=15&&!l[15]&&(m.monsterSmashStreak++,l[15]=!0),e>=20&&!l[20]&&(m.potatoStreak++,l[20]=!0),e>=25&&!l[25]&&(m.smashSmashStreak++,l[25]=!0),e>=30&&!l[30]&&(m.potoatachioStreak++,l[30]=!0),null===n?(s=1,n=t.time):(t.time-n<=4e3?(s++,2===s&&r.doubleSmash++,3===s&&r.multiSmash++,4===s&&r.multiMegaSmash++,5===s&&r.multiMegaUltraSmash++,6===s&&r.gooseySmash++,7===s&&r.crazyMultiMegaUltraSmash++):s=1,n=t.time))})),o=a}let d=[];Array.isArray(t.players)&&(d=[...new Set(t.players)]),a.innerHTML=`\n        <div class="match-info-title">Match Information</div>\n        ${t.map?`<div class="match-info-section"><span class="match-info-label">Map:</span><span class="match-info-value">${t.map}</span></div>`:""}\n        <div class="match-info-section"><span class="match-info-label">Start:</span><span class="match-info-value">${l(t.matchStartTime)}</span></div>\n        <div class="match-info-section"><span class="match-info-label">End:</span><span class="match-info-value">${l(t.matchEndTime)}</span></div>\n        <div class="match-info-section"><span class="match-info-label">Kills:</span><span class="match-info-value">${t.kills}</span></div>\n        <div class="match-info-section"><span class="match-info-label">Deaths:</span><span class="match-info-value">${t.deaths}</span></div>\n        <div class="match-info-section"><span class="match-info-label">KDR:</span><span class="match-info-value">${i(t.kills,t.deaths)}</span></div>\n        <div class="match-info-section"><span class="match-info-label">Duration:</span><span class="match-info-value">${c(n)}</span></div>\n        <div class="match-info-section"><span class="match-info-label">Highest Kill Streak:</span><span class="match-info-value">${o}</span></div>\n        \n        ${Object.values(m).some((t=>t>0))?`\n        <div class="match-info-section">\n            <span class="match-info-label" style="display:block;margin-bottom:6px;">Streaks (Without Dying):</span>\n            <ul style="margin:0 0 0 12px;padding:0;list-style:disc;">\n                ${m.smashStreak>0?`<li style='font-size:16px;'>Smash Streak (3): ${m.smashStreak}</li>`:""}\n                ${m.smashtacularStreak>0?`<li style='font-size:16px;'>Smashtacular Streak (5): ${m.smashtacularStreak}</li>`:""}\n                ${m.smashosaurusStreak>0?`<li style='font-size:16px;'>Smashosaurus Streak (7): ${m.smashosaurusStreak}</li>`:""}\n                ${m.smashlvaniaStreak>0?`<li style='font-size:16px;'>Smashlvania Streak (10): ${m.smashlvaniaStreak}</li>`:""}\n                ${m.monsterSmashStreak>0?`<li style='font-size:16px;'>Monster Smash Streak (15): ${m.monsterSmashStreak}</li>`:""}\n                ${m.potatoStreak>0?`<li style='font-size:16px;'>Potato Streak (20): ${m.potatoStreak}</li>`:""}\n                ${m.smashSmashStreak>0?`<li style='font-size:16px;'>Smash Smash Streak (25): ${m.smashSmashStreak}</li>`:""}\n                ${m.potoatachioStreak>0?`<li style='font-size:16px;'>Potoatachio Streak (30): ${m.potoatachioStreak}</li>`:""}\n            </ul>\n        </div>\n        `:""}\n\n        ${Object.values(r).some((t=>t>0))?`\n        <div class="match-info-section">\n            <span class="match-info-label" style="display:block;margin-bottom:6px;">Streaks (Quick Kills):</span>\n            <ul style="margin:0 0 0 12px;padding:0;list-style:disc;">\n                ${r.doubleSmash>0?`<li style='font-size:16px;'>Double Smash (2): ${r.doubleSmash}</li>`:""}\n                ${r.multiSmash>0?`<li style='font-size:16px;'>Multi Smash (3): ${r.multiSmash}</li>`:""}\n                ${r.multiMegaSmash>0?`<li style='font-size:16px;'>Multi Mega Smash (4): ${r.multiMegaSmash}</li>`:""}\n                ${r.multiMegaUltraSmash>0?`<li style='font-size:16px;'>Multi Mega Ultra Smash (5): ${r.multiMegaUltraSmash}</li>`:""}\n                ${r.gooseySmash>0?`<li style='font-size:16px;'>Goosey Smash (6): ${r.gooseySmash}</li>`:""}\n                ${r.crazyMultiMegaUltraSmash>0?`<li style='font-size:16px;'>Crazy Multi Mega Ultra Smash (7): ${r.crazyMultiMegaUltraSmash}</li>`:""}\n            </ul>\n        </div>\n        `:""}\n\n        <div class="match-info-section">\n            <span class="match-info-label" style="display:block;margin-bottom:6px;">Detected Players In Room:</span>\n            <ul style="margin:0 0 0 12px;padding:0;list-style:disc;">\n                ${d.length>0?d.map((t=>`<li style='font-size:16px;'>${t}</li>`)).join(""):'<li style="color:#aaa;font-size:16px;">No players detected</li>'}\n            </ul>\n        </div>\n        <div class="match-info-indicators">${s.join(" | ")}</div>\n    `,e.style.display="flex"}(a),n.appendChild(o),n.appendChild(k),n.appendChild(v),e.appendChild(n)}))}(G)}(t,r)}))}))}document.addEventListener("DOMContentLoaded",(()=>{document.getElementById("normalModeBtn").addEventListener("click",(()=>{r="normal",p(),g()})),document.getElementById("specialModeBtn").addEventListener("click",(()=>{r="special",p(),g()})),document.getElementById("customModeBtn").addEventListener("click",(()=>{r="custom",p(),g()})),document.getElementById("allStatsBtn").addEventListener("click",(()=>{r="all",p(),g()})),document.querySelectorAll(".stats-details").forEach((t=>{t.addEventListener("toggle",(()=>{document.querySelectorAll(".stats-details").forEach((t=>{const e=t.querySelector(".stats-section-label").id;h[e]=t.hasAttribute("open")})),chrome.storage.local.set({openSections:h})}))})),document.getElementById("exportStatsBtn").addEventListener("click",f),document.getElementById("importStatsBtn").addEventListener("click",(()=>{document.getElementById("importStatsInput").click()})),document.getElementById("importStatsInput").addEventListener("change",(t=>{t.target.files.length>0&&(async function(t){try{const e=new FileReader;e.onload=async function(t){try{const e=(new TextDecoder).decode(t.target.result),a=await async function(t){try{await E();const e=t.match(/^SKMT_ENCRYPTED_v(\d+\.\d+)_(.+)$/);if(!e)throw new Error("Invalid encrypted data format");if(e[1]!==y)throw new Error("Incompatible encryption version");const a=e[2],s=new Uint8Array(atob(a).split("").map((t=>t.charCodeAt(0)))),n=s.slice(0,12),o=s.slice(12),l=await crypto.subtle.decrypt({name:"AES-GCM",iv:n},S,o),i=new TextDecoder;return JSON.parse(i.decode(l))}catch(t){throw console.error("Decryption error:",t),new Error("Failed to decrypt data")}}(e);if(a.skid!==m)throw new Error("Stats file SKID does not match current SKID");const s=31536e6;if(Date.now()-a.timestamp>s)throw new Error("Stats file is too old");if(!confirm("Are you sure you want to import these stats? This will overwrite your current stats."))return;if(await new Promise((t=>{chrome.storage.sync.set(a.data,t)})),a.data.uiState){const t=a.data.uiState;t.currentMode&&(r=t.currentMode,document.querySelectorAll(".mode-btn").forEach((t=>{t.classList.toggle("active",t.dataset.mode===r)}))),t.openSections&&await new Promise((e=>{chrome.storage.local.set({openSections:t.openSections},e)}))}g(),alert("Stats imported successfully!")}catch(t){console.error("Error processing imported stats:",t),alert(t.message||"Failed to import stats. The file may be corrupted or invalid.")}},e.onerror=function(){alert("Error reading file. Please try again.")},e.readAsArrayBuffer(t)}catch(t){console.error("Error importing stats:",t),alert("Failed to import stats. Please try again.")}}(t.target.files[0]),t.target.value="")})),document.getElementById("visualizeStatsBtn").addEventListener("click",(()=>{console.log("[SKMT] Visualize Stats button clicked");const t=document.getElementById("visualizeStatsBtn");t.disabled=!0;try{chrome.runtime.sendMessage({type:"OPEN_VISUALIZERS"},(e=>(t.disabled=!1,chrome.runtime.lastError?(console.error("[SKMT] Error opening visualizers:",chrome.runtime.lastError),void alert("Failed to open visualizers: "+chrome.runtime.lastError.message)):e?e.success?void console.log("[SKMT] Successfully opened visualizers in tab:",e.tabId):(console.error("[SKMT] Failed to open visualizers:",e.error),void alert("Failed to open visualizers: "+(e.error||"Unknown error"))):(console.error("[SKMT] No response received from background script"),void alert("Failed to open visualizers: No response received")))))}catch(e){t.disabled=!1,console.error("[SKMT] Error sending message:",e),alert("Failed to open visualizers: "+e.message)}})),document.getElementById("resetStatsBtn").addEventListener("click",(function(){if(!m)return;const t=[],e="all"===r?["normal","special","custom"]:[r];if(confirm(`Are you sure you want to reset all stats and match history for ${"all"===r?"all modes":"this mode"} and SKID?`)){e.forEach((e=>{t.push(u("matchHistory",m,e)),t.push(u("gamesJoined",m,e)),t.push(u("gamesStarted",m,e)),t.push(u("gamesQuit",m,e)),t.push(u("matchesCompleted",m,e))}));const a={};t.forEach((t=>a[t]=t.includes("matchHistory")?[]:0)),chrome.storage.sync.set(a,(()=>{console.log("[SKMT][RESET] Stats reset for",e,"mode(s)."),g()}))}})),p(),g(),chrome.storage.local.get(["openSections"],(t=>{t.openSections&&(h=t.openSections,Object.entries(h).forEach((([t,e])=>{const a=document.querySelector(`.stats-details:has(#${t})`);a&&(e?a.setAttribute("open",""):a.removeAttribute("open"))})))}));const t=document.getElementById("moreDetailsBtn");t&&t.addEventListener("click",(()=>{chrome.tabs.create({url:"match-history.html"})}))})),chrome.storage.onChanged.addListener(((t,e)=>{"sync"===e&&(t[`favoriteMatches_${m||"Default"}`]?(console.log("[SKMT][POPUP] Favorite matches changed in storage, reloading stats."),g()):m&&Object.keys(t).some((t=>t.includes(`_${m}_`)))&&g())})),chrome.runtime.onMessage.addListener((function(t,e,a){if("SKMT_SKID_UPDATED"===t.type)g();else if("SKMT_MATCH_COMPLETE"===t.type){console.log("[SKMT][POPUP] Received MATCH_COMPLETE message:",t.data);const e=t.data,a=e.isSpecialMode?"special":e.isCustomMode?"custom":"normal",s=m||"Default",n=u("gamesQuit",s,a);if(e.quit){const t=e.matchEndTime-e.matchStartTime;t>=15e3?chrome.storage.sync.get([n],(s=>{let o=s[n]||0;o++;const l={};l[n]=o,console.log(`[SKMT][POPUP] Incrementing gamesQuit for ${a} mode. New value:`,o,"Time spent:",t),chrome.storage.sync.set(l,(()=>{console.log(`[SKMT][POPUP] Saved quit counter for ${a} mode:`,{quit:e.quit,isSpecialMode:e.isSpecialMode,isCustomMode:e.isCustomMode,gamesQuit:o,timeSpent:t}),g()}))})):(console.log("[SKMT][POPUP] Not incrementing gamesQuit - time spent less than 15 seconds:",t),g())}else{const t=u("matchHistory",s,a),n=u("gamesJoined",s,a),o=u("gamesStarted",s,a),l=u("matchesCompleted",s,a);chrome.storage.sync.get([t,n,o,l],(s=>{let i=s[t]||[],c=s[n]||0,m=s[o]||0,r=s[l]||0;e.quit||(i.push(e),e.joined&&c++,e.started&&m++,r++);const d={};d[t]=i,d[n]=c,d[o]=m,d[l]=r,chrome.storage.sync.set(d,(()=>{console.log(`[SKMT][POPUP] Saved completed match data for ${a} mode:`,{quit:e.quit,isSpecialMode:e.isSpecialMode,isCustomMode:e.isCustomMode,savedToHistory:!e.quit,timeSpent:e.matchEndTime-e.matchStartTime}),g()}))}))}}}));const y="1.4";let S=null;async function E(){return S||(S=await async function(){const t=(new TextEncoder).encode("SKMT_SECURE_SALT_v1.4"),e=await crypto.subtle.digest("SHA-256",t);return await crypto.subtle.importKey("raw",e,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}()),S}async function f(){try{const t=["normal","special","custom"],e=["currentSkid"];t.forEach((t=>{e.push(u("matchHistory",m,t)),e.push(u("gamesJoined",m,t)),e.push(u("gamesStarted",m,t)),e.push(u("gamesQuit",m,t)),e.push(u("matchesCompleted",m,t))}));const a=await new Promise((t=>{chrome.storage.sync.get(e,t)})),s=await new Promise((t=>{chrome.storage.local.get(["openSections"],t)})),n={};t.forEach((t=>{const e=a[u("matchHistory",m,t)]||[];let s=0,o=0,l=0,i=0,c=0,r=0,d=0,h=0,p=0,g=0,y=0,S=0,E=0,f=0,k=0,v=0,M=0,I=0;e.forEach((t=>{t.kills>=3&&s++,t.kills>=5&&o++,t.kills>=7&&l++,t.kills>=10&&i++,t.kills>=15&&c++,t.kills>=20&&r++,t.kills>=25&&d++,t.kills>=30&&h++,t.kills>k&&(k=t.kills),t.deaths>v&&(v=t.deaths);const e=t.deaths>0?t.kills/t.deaths:t.kills;if(e>I&&(I=e),t.killTimestamps&&t.killTimestamps.length>0){let e=0,a=0;const s=[];t.killTimestamps&&t.killTimestamps.forEach((t=>s.push({type:"kill",time:t}))),t.deathTimestamps&&t.deathTimestamps.forEach((t=>s.push({type:"death",time:t}))),s.sort(((t,e)=>t.time-e.time)),s.forEach((t=>{"death"===t.type?(e>a&&(a=e),e=0):"kill"===t.type&&(e++,e>a&&(a=e))})),a>M&&(M=a)}if(t.killTimestamps&&t.killTimestamps.length>0){let e=0,a=t.killTimestamps[0];for(let s=1;s<t.killTimestamps.length;s++){const n=t.killTimestamps[s];n-a<=4e3?(e++,2===e&&p++,3===e&&g++,4===e&&y++,5===e&&S++,6===e&&E++,7===e&&f++):e=1,a=n}}})),n[t]={smashStreak:s,smashtacularStreak:o,smashosaurusStreak:l,smashlvaniaStreak:i,monsterSmashStreak:c,potatoStreak:r,smashSmashStreak:d,potoatachioStreak:h,doubleSmash:p,multiSmash:g,multiMegaSmash:y,multiMegaUltraSmash:S,gooseySmash:E,crazyMultiMegaUltraSmash:f,highestKillsRecord:k,highestDeathsRecord:v,highestKillStreakRecord:M,highestKDRRecord:I}})),a.stats=n,a.uiState={currentMode:r,openSections:s.openSections||{},skid:m};const o={version:y,timestamp:Date.now(),skid:m,data:a},l=await async function(t){try{await E();const e=crypto.getRandomValues(new Uint8Array(12)),a=(new TextEncoder).encode(JSON.stringify(t)),s=await crypto.subtle.encrypt({name:"AES-GCM",iv:e},S,a),n=new Uint8Array(e.length+s.byteLength);n.set(e),n.set(new Uint8Array(s),e.length);const o=btoa(String.fromCharCode.apply(null,n));return`SKMT_ENCRYPTED_v${y}_${o}`}catch(t){throw console.error("Encryption error:",t),new Error("Failed to encrypt data")}}(o),i=new Blob([l],{type:"application/octet-stream"}),c=URL.createObjectURL(i),d=document.createElement("a");d.href=c,d.download=`smash_karts_stats_${m}_${(new Date).toISOString().split("T")[0]}.skmt`,document.body.appendChild(d),d.click(),document.body.removeChild(d),URL.revokeObjectURL(c)}catch(t){console.error("Error exporting stats:",t),alert("Failed to export stats. Please try again.")}}document.getElementById("closeMatchInfoModal")&&(document.getElementById("closeMatchInfoModal").onclick=function(){document.getElementById("matchInfoModal").style.display="none"}),document.getElementById("matchInfoModal")&&(document.getElementById("matchInfoModal").onclick=function(t){t.target===this&&(this.style.display="none")});let k=null;function v(){const t=document.getElementById("hudSettingsModal");document.getElementById("hudSettingsTitle").textContent=("deaths"===k?"Deaths":"Kill Streak")+" HUD Settings";const e=`${k}HudSettings`;chrome.storage.sync.get([e],(t=>{const a=t[e]||{fontSize:32,fontColor:"#ffffff",fontFamily:"Arial, sans-serif",backgroundColor:"rgba(0, 0, 0, 0.5)"};document.getElementById("hudFontSize").value=a.fontSize,document.getElementById("fontSizeValue").textContent=`${a.fontSize}px`,document.getElementById("hudFontColor").value=a.fontColor,document.getElementById("hudFontFamily").value=a.fontFamily,document.getElementById("hudBackgroundColor").value=a.backgroundColor?function(t){const e=t.substring(t.indexOf("(")+1,t.indexOf(")")).split(",");return`#${((1<<24)+(parseInt(e[0].trim())<<16)+(parseInt(e[1].trim())<<8)+parseInt(e[2].trim())).toString(16).slice(1).toUpperCase()}`}(a.backgroundColor):"#000000"})),t.style.display="flex"}function M(){const t={fontSize:document.getElementById("hudFontSize").value,fontColor:document.getElementById("hudFontColor").value,fontFamily:document.getElementById("hudFontFamily").value,backgroundColor:I(document.getElementById("hudBackgroundColor").value,.5)},e=`${k}HudSettings`;chrome.storage.sync.set({[e]:t}),chrome.tabs.query({active:!0,currentWindow:!0},(e=>{chrome.tabs.sendMessage(e[0].id,{type:`update-${k}-hud-style`,settings:t})}))}function I(t,e){const a=parseInt(t.slice(1),16);return`rgba(${a>>16&255}, ${a>>8&255}, ${255&a}, ${e})`}document.getElementById("deathsHudSettings").addEventListener("click",(()=>{k="deaths",v()})),document.getElementById("killStreakHudSettings").addEventListener("click",(()=>{k="killstreak",v()})),document.getElementById("closeHudSettingsModal").addEventListener("click",(()=>{document.getElementById("hudSettingsModal").style.display="none"})),document.getElementById("hudSettingsModal").addEventListener("click",(t=>{t.target===document.getElementById("hudSettingsModal")&&(document.getElementById("hudSettingsModal").style.display="none")})),document.getElementById("hudFontSize").addEventListener("input",(t=>{const e=t.target.value;document.getElementById("fontSizeValue").textContent=`${e}px`,M()})),document.getElementById("hudFontColor").addEventListener("change",M),document.getElementById("hudFontFamily").addEventListener("change",M),document.getElementById("hudBackgroundColor").addEventListener("input",M);let B={};document.getElementById("matchSortSelect")&&document.getElementById("matchSortSelect").addEventListener("change",(function(t){g()}))})();