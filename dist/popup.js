(()=>{document.getElementById("kills"),document.getElementById("deaths"),document.getElementById("matches"),document.getElementById("matches-list");const e=document.getElementById("statsBtn"),t=document.getElementById("hudBtn"),a=document.getElementById("statsSection"),s=document.getElementById("hudSection");function n(e){return e?new Date(e).toLocaleString(void 0,{hour:"2-digit",minute:"2-digit",second:"2-digit",year:"2-digit",month:"2-digit",day:"2-digit"}):"-"}function o(e,t){return 0===t?e>0?e.toFixed(2):"0.00":(e/t).toFixed(2)}function l(e){const t=Math.floor(e/1e3),a=Math.floor(t/3600),s=Math.floor(t%3600/60),n=t%60;return a>0?`${a}h ${s}m ${n}s`:s>0?`${s}m ${n}s`:`${n}s`}a.classList.add("active"),e.addEventListener("click",(()=>{e.classList.add("selected"),t.classList.remove("selected"),a.style.display="block",s.style.display="none"})),t.addEventListener("click",(()=>{t.classList.add("selected"),e.classList.remove("selected"),a.style.display="none",s.style.display="block"})),document.getElementById("toggleDeathsHud").addEventListener("change",(function(){const e=this.checked;chrome.tabs.query({active:!0,currentWindow:!0},(t=>{chrome.tabs.sendMessage(t[0].id,{type:"toggle-hud",enabled:e})}))}));let m=null,i="normal",d={primaryStats:!1,secondaryStats:!1,averageStats:!1,streaks:!1,quickKills:!1};function c(e,t,a){const s=a||i;return"all"===s?null:`${e}_${t}_${s}`}function r(){document.getElementById("normalModeBtn").classList.toggle("selected","normal"===i),document.getElementById("specialModeBtn").classList.toggle("selected","special"===i),document.getElementById("customModeBtn").classList.toggle("selected","custom"===i),document.getElementById("allStatsBtn").classList.toggle("selected","all"===i),document.getElementById("primaryStatsHeader").textContent="all"===i?"All Modes Primary Stats":"Primary Stats",document.getElementById("secondaryStatsHeader").textContent="all"===i?"All Modes Secondary Stats":"Secondary Stats"}function h(){chrome.storage.sync.get(["currentSkid"],(e=>{m=e.currentSkid||"Default",document.getElementById("skidValue").textContent=m;const t=["currentSkid"];"all"===i?["normal","special","custom"].forEach((e=>{t.push(c("matchHistory",m,e)),t.push(c("gamesJoined",m,e)),t.push(c("gamesStarted",m,e)),t.push(c("gamesQuit",m,e)),t.push(c("matchesCompleted",m,e))})):(t.push(c("matchHistory",m,i)),t.push(c("gamesJoined",m,i)),t.push(c("gamesStarted",m,i)),t.push(c("gamesQuit",m,i)),t.push(c("matchesCompleted",m,i))),console.log("[SKMT][LOAD] Loading stats for SKID:",m,"Mode:",i,"Keys:",t),chrome.storage.sync.get(t,(e=>{console.log("[SKMT][LOAD] Data returned from chrome.storage.sync:",e),document.querySelector(".match-history").style.display="block",function(e,t){const a=e[c("matchHistory",m,t)]||[];let s=0,i=0,d=0,r=0,h=0,g=0,p=0,S=0,y=0,E=0,k=0,M=0,C=0,f=0,T=0,B=0,v=0,I=0,x=0,L=0,$=0;if("all"===t){const t=["normal","special","custom"],a={};t.forEach((t=>{const s=e[c("matchHistory",m,t)]||[];let n=0,o=0,l=0,i=e[c("gamesJoined",m,t)]||0,d=e[c("gamesStarted",m,t)]||0,r=e[c("gamesQuit",m,t)]||0,h=e[c("matchesCompleted",m,t)]||0,u=0,g=0,p=0,S=0,y=0,E=0,k=0,M=0,C=0,f=0,T=0,B=0,v=0,I=0;s.forEach((e=>{var t;n+=e.kills||0,o+=e.deaths||0,l+=(null===(t=e.playerStats)||void 0===t?void 0:t.timeSpent)||(e.endTime&&e.startTime?e.endTime-e.startTime:0)})),s.forEach((e=>{let t=0,a=null,s=0,n={};const o=[];e.killTimestamps&&e.killTimestamps.forEach((e=>o.push({type:"kill",time:e}))),e.deathTimestamps&&e.deathTimestamps.forEach((e=>o.push({type:"death",time:e}))),o.sort(((e,t)=>e.time-t.time)),o.forEach((e=>{"death"===e.type?(t=0,n={}):"kill"===e.type&&(t++,t>=3&&!n[3]&&(u++,n[3]=!0),t>=5&&!n[5]&&(g++,n[5]=!0),t>=7&&!n[7]&&(p++,n[7]=!0),t>=10&&!n[10]&&(S++,n[10]=!0),t>=15&&!n[15]&&(y++,n[15]=!0),t>=20&&!n[20]&&(E++,n[20]=!0),t>=25&&!n[25]&&(k++,n[25]=!0),t>=30&&!n[30]&&(M++,n[30]=!0),a&&e.time-a<=3e3?(s++,2===s&&C++,3===s&&f++,4===s&&T++,5===s&&B++,6===s&&v++,7===s&&I++):s=1,a=e.time)}))})),a[t]={kills:n,deaths:o,timeSpent:l,gamesJoined:i,gamesStarted:d,gamesQuit:r,matchesCompleted:h,smashStreak:u,smashtacularStreak:g,smashosaurusStreak:p,smashlvaniaStreak:S,monsterSmashStreak:y,potatoStreak:E,smashSmashStreak:k,potoatachioStreak:M,doubleSmash:C,multiSmash:f,multiMegaSmash:T,multiMegaUltraSmash:B,gooseySmash:v,crazyMultiMegaUltraSmash:I}})),t.forEach((e=>{const t=a[e];s+=t.kills,i+=t.deaths,d+=t.timeSpent,r+=t.gamesJoined,h+=t.gamesStarted,g+=t.gamesQuit,p+=t.matchesCompleted,S+=t.smashStreak,y+=t.smashtacularStreak,E+=t.smashosaurusStreak,k+=t.smashlvaniaStreak,M+=t.monsterSmashStreak,C+=t.potatoStreak,f+=t.smashSmashStreak,T+=t.potoatachioStreak,B+=t.doubleSmash,v+=t.multiSmash,I+=t.multiMegaSmash,x+=t.multiMegaUltraSmash,L+=t.gooseySmash,$+=t.crazyMultiMegaUltraSmash}))}else a.forEach((e=>{var t;s+=e.kills||0,i+=e.deaths||0,d+=(null===(t=e.playerStats)||void 0===t?void 0:t.timeSpent)||(e.endTime&&e.startTime?e.endTime-e.startTime:0)})),r=e[c("gamesJoined",m,t)]||0,h=e[c("gamesStarted",m,t)]||0,g=e[c("gamesQuit",m,t)]||0,p=e[c("matchesCompleted",m,t)]||0,a.forEach((e=>{let t=0,a=null,s=0,n={};const o=[];e.killTimestamps&&e.killTimestamps.forEach((e=>o.push({type:"kill",time:e}))),e.deathTimestamps&&e.deathTimestamps.forEach((e=>o.push({type:"death",time:e}))),o.sort(((e,t)=>e.time-t.time)),o.forEach((e=>{"death"===e.type?(t=0,n={}):"kill"===e.type&&(t++,t>=3&&!n[3]&&(S++,n[3]=!0),t>=5&&!n[5]&&(y++,n[5]=!0),t>=7&&!n[7]&&(E++,n[7]=!0),t>=10&&!n[10]&&(k++,n[10]=!0),t>=15&&!n[15]&&(M++,n[15]=!0),t>=20&&!n[20]&&(C++,n[20]=!0),t>=25&&!n[25]&&(f++,n[25]=!0),t>=30&&!n[30]&&(T++,n[30]=!0),a&&e.time-a<=3e3?(s++,2===s&&B++,3===s&&v++,4===s&&I++,5===s&&x++,6===s&&L++,7===s&&$++):s=1,a=e.time)}))}));document.getElementById("smashStreak").textContent=S,document.getElementById("smashtacularStreak").textContent=y,document.getElementById("smashosaurusStreak").textContent=E,document.getElementById("smashlvaniaStreak").textContent=k,document.getElementById("monsterSmashStreak").textContent=M,document.getElementById("potatoStreak").textContent=C,document.getElementById("smashSmashStreak").textContent=f,document.getElementById("potoatachioStreak").textContent=T,document.getElementById("doubleSmash").textContent=B,document.getElementById("multiSmash").textContent=v,document.getElementById("multiMegaSmash").textContent=I,document.getElementById("multiMegaUltraSmash").textContent=x,document.getElementById("gooseySmash").textContent=L,document.getElementById("crazyMultiMegaUltraSmash").textContent=$,document.getElementById("streaksHeader").textContent="all"===t?"All Modes Streaks (Without Dying)":"Streaks (Without Dying)",document.getElementById("quickKillsHeader").textContent="all"===t?"All Modes Streaks (Quick Kills)":"Streaks (Quick Kills)";const b=(p||0)+(g||0);document.getElementById("killsLabel").textContent="all"===t?"Total Kills":"Kills",document.getElementById("deathsLabel").textContent="all"===t?"Total Deaths":"Deaths",document.getElementById("kdrLabel").textContent="all"===t?"Overall KDR":"KDR",document.getElementById("matchesCompletedLabel").textContent="all"===t?"Total Matches Completed":"Matches Completed",document.getElementById("totalTimeSpentLabel").textContent="all"===t?"Total Time Played":"Time Played",document.getElementById("gamesJoinedLabel").textContent="all"===t?"Total Matches Joined":"Matches Joined",document.getElementById("totalMatchesLabel").textContent="Total Matches (Completed + Quit)",console.log("[SKMT][POPUP][DISPLAY] Updating gamesQuit display. Value:",g,"Element:",document.getElementById("gamesQuit")),document.getElementById("kills").textContent=s,document.getElementById("deaths").textContent=i,document.getElementById("kdr").textContent=o(s,i),document.getElementById("totalTimeSpent").textContent=l(d),document.getElementById("gamesJoined").textContent=r,document.getElementById("gamesStarted").textContent=h,document.getElementById("gamesQuit").textContent=g,document.getElementById("matchesCompleted").textContent=p,document.getElementById("totalMatches").textContent=b;const w=b,H=w>0?(p||0)/w*100:0,D=w>0?(g||0)/w*100:0;document.getElementById("matchesCompletedRate").textContent=`${H.toFixed(2)}%`,document.getElementById("matchesQuitRate").textContent=`${D.toFixed(2)}%`;const K=w>0?s/w:0,A=w>0?i/w:0,P=w>0?d/w:0;document.getElementById("avgKills").textContent=K.toFixed(2),document.getElementById("avgDeaths").textContent=A.toFixed(2),document.getElementById("avgTimeSpent").textContent=l(P),document.getElementById("averageStatsHeader").textContent="all"===t?"All Modes Average Stats":"Average Stats";const U=document.getElementById("matches-list");if(U.innerHTML="","all"===t){const t=[];["normal","special","custom"].forEach((a=>{(e[c("matchHistory",m,a)]||[]).forEach((e=>{t.push({...e,mode:a})}))})),t.sort(((e,t)=>{const a=e.matchStartTime||e.startTime||0;return(t.matchStartTime||t.startTime||0)-a})),t.forEach(((e,a)=>{var s;const l=document.createElement("div");l.className="match-card";const m=document.createElement("div");m.className="match-card-content";const i=document.createElement("div");i.className="match-meta",i.textContent=`#${t.length-a} | ${n(e.matchStartTime)} - ${n(e.matchEndTime)}`,m.appendChild(i);const d=document.createElement("div");d.className="match-stats",d.innerHTML="",d.innerHTML+=`<span>Kills:</span><b>${e.kills}</b>`,d.innerHTML+=`<span>Deaths:</span><b>${e.deaths}</b>`,d.innerHTML+=`<span>KDR:</span><b>${o(e.kills,e.deaths)}</b>`;const c=(null===(s=e.playerStats)||void 0===s?void 0:s.timeSpent)||(e.endTime&&e.startTime?e.endTime-e.startTime:0),r=Math.floor(c/36e5),h=Math.floor(c%36e5/6e4),g=Math.floor(c%6e4/1e3);let p;p=r>0?`${r}h ${h}m ${g}s`:`${h}m ${g}s`,d.innerHTML+=`<span>Duration:</span><b>${p}</b>`,m.appendChild(d);const S=document.createElement("div");S.className="match-flags";let y=[];e.joined&&y.push("Joined"),e.started&&y.push("Started"),e.quit?y.push("Quit"):y.push("Completed"),e.isSpecialMode&&y.push("Special Mode"),e.isCustomMode&&y.push("Custom Match"),y.push(`${e.mode.charAt(0).toUpperCase()+e.mode.slice(1)} Mode`),y.length>0&&(S.textContent=y.join(" | ")),m.appendChild(S);const E=document.createElement("button");E.className="trash-btn",E.title="Delete this match",E.innerHTML='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 8V15M10 8V15M14 8V15M3 5H17M8 5V3H12V5M5 5V17C5 17.5523 5.44772 18 6 18H14C14.5523 18 15 17.5523 15 17V5" stroke="#e74c3c" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>',E.onclick=()=>u(t.length-1-a,e.mode),l.appendChild(m),l.appendChild(E),U.appendChild(l)}))}else a.slice().reverse().forEach(((e,t)=>{var s;const l=document.createElement("div");l.className="match-card";const m=document.createElement("div");m.className="match-card-content";const i=document.createElement("div");i.className="match-meta",i.textContent=`#${a.length-t} | ${n(e.matchStartTime)} - ${n(e.matchEndTime)}`,m.appendChild(i);const d=document.createElement("div");d.className="match-stats",d.innerHTML="",d.innerHTML+=`<span>Kills:</span><b>${e.kills}</b>`,d.innerHTML+=`<span>Deaths:</span><b>${e.deaths}</b>`,d.innerHTML+=`<span>KDR:</span><b>${o(e.kills,e.deaths)}</b>`;const c=(null===(s=e.playerStats)||void 0===s?void 0:s.timeSpent)||(e.endTime&&e.startTime?e.endTime-e.startTime:0),r=Math.floor(c/36e5),h=Math.floor(c%36e5/6e4),g=Math.floor(c%6e4/1e3);let p;p=r>0?`${r}h ${h}m ${g}s`:`${h}m ${g}s`,d.innerHTML+=`<span>Duration:</span><b>${p}</b>`,m.appendChild(d);const S=document.createElement("div");S.className="match-flags";let y=[];e.joined&&y.push("Joined"),e.started&&y.push("Started"),e.quit?y.push("Quit"):y.push("Completed"),e.isSpecialMode&&y.push("Special Mode"),e.isCustomMode&&y.push("Custom Match"),y.length>0&&(S.textContent=y.join(" | ")),m.appendChild(S);const E=document.createElement("button");E.className="trash-btn",E.title="Delete this match",E.innerHTML='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 8V15M10 8V15M14 8V15M3 5H17M8 5V3H12V5M5 5V17C5 17.5523 5.44772 18 6 18H14C14.5523 18 15 17.5523 15 17V5" stroke="#e74c3c" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>',E.onclick=()=>u(a.length-1-t),l.appendChild(m),l.appendChild(E),U.appendChild(l)}))}(e,i)}))}))}function u(e,t){chrome.storage.sync.get(["currentSkid"],(a=>{const s=a.currentSkid||"Default",n=t||i;if("all"===i&&!t)return void console.warn("[SKMT][DELETE] Cannot delete individual match in All Stats mode without mode specified.");const o=c("matchHistory",s,n);chrome.storage.sync.get([o],(t=>{let a=t[o]||[];if(e<0||e>=a.length)return;a.splice(e,1)[0];let l=0,m=0,i=0,d=0,r=0,u=0;a.forEach((e=>{l+=e.kills||0,m+=e.deaths||0,e.joined&&i++,e.started&&d++,e.quit&&r++,"special"===n&&e.isSpecialMode&&!e.quit&&u++,"normal"!==n||e.isSpecialMode||e.isCustomMode||e.quit||u++,"custom"===n&&e.isCustomMode&&!e.quit&&u++}));const g={};g[c("matchHistory",s,n)]=a,g[c("gamesJoined",s,n)]=i,g[c("gamesStarted",s,n)]=d,g[c("gamesQuit",s,n)]=r,g[c("matchesCompleted",s,n)]=u,chrome.storage.sync.set(g,h)}))}))}async function g(e){const t=(new TextEncoder).encode(JSON.stringify(e)),a=await crypto.subtle.digest("SHA-256",t);return Array.from(new Uint8Array(a)).map((e=>e.toString(16).padStart(2,"0"))).join("")}document.addEventListener("DOMContentLoaded",(()=>{document.getElementById("normalModeBtn").addEventListener("click",(()=>{i="normal",r(),h()})),document.getElementById("specialModeBtn").addEventListener("click",(()=>{i="special",r(),h()})),document.getElementById("customModeBtn").addEventListener("click",(()=>{i="custom",r(),h()})),document.getElementById("allStatsBtn").addEventListener("click",(()=>{i="all",r(),h()})),r(),h(),document.querySelectorAll(".stats-details").forEach((e=>{e.addEventListener("toggle",(()=>{document.querySelectorAll(".stats-details").forEach((e=>{const t=e.querySelector(".stats-section-label").id;d[t]=e.hasAttribute("open")})),chrome.storage.local.set({openSections:d})}))})),chrome.storage.local.get(["openSections"],(e=>{e.openSections&&(d=e.openSections,Object.entries(d).forEach((([e,t])=>{const a=document.querySelector(`.stats-details:has(#${e})`);a&&(t?a.setAttribute("open",""):a.removeAttribute("open"))})))})),h()})),chrome.storage.onChanged.addListener(((e,t)=>{"sync"===t&&m&&Object.keys(e).some((e=>e.includes(`_${m}_`)))&&h()})),document.getElementById("resetStatsBtn").addEventListener("click",(function(){if(!m)return;const e=[],t="all"===i?["normal","special","custom"]:[i];if(confirm(`Are you sure you want to reset all stats and match history for ${"all"===i?"all modes":"this mode"} and SKID?`)){t.forEach((t=>{e.push(c("matchHistory",m,t)),e.push(c("gamesJoined",m,t)),e.push(c("gamesStarted",m,t)),e.push(c("gamesQuit",m,t)),e.push(c("matchesCompleted",m,t))}));const a={};e.forEach((e=>a[e]=e.includes("matchHistory")?[]:0)),chrome.storage.sync.set(a,(()=>{console.log("[SKMT][RESET] Stats reset for",t,"mode(s)."),h()}))}})),chrome.runtime.onMessage.addListener((function(e,t,a){if("SKMT_SKID_UPDATED"===e.type)h();else if("SKMT_MATCH_COMPLETE"===e.type){console.log("[SKMT][POPUP] Received MATCH_COMPLETE message:",e.data);const t=e.data,a=t.isSpecialMode?"special":t.isCustomMode?"custom":"normal",s=m||"Default",n=c("matchHistory",s,a),o=c("gamesJoined",s,a),l=c("gamesStarted",s,a),i=c("gamesQuit",s,a),d=c("matchesCompleted",s,a);chrome.storage.sync.get([n,o,l,i,d],(e=>{let s=e[n]||[],m=e[o]||0,c=e[l]||0,r=e[i]||0,u=e[d]||0;console.log(`[SKMT][POPUP] Before update - Mode: ${a}, Games Joined: ${m}, Games Started: ${c}, Games Quit: ${r}, Matches Completed: ${u}`),s.push(t),t.joined&&m++,t.started&&c++,t.quit&&r++,t.quit||u++,console.log(`[SKMT][POPUP] After update - Mode: ${a}, Games Joined: ${m}, Games Started: ${c}, Games Quit: ${r}, Matches Completed: ${u}`);const g={};g[n]=s,g[o]=m,g[l]=c,g[i]=r,g[d]=u,chrome.storage.sync.set(g,(()=>{console.log(`[SKMT][POPUP] Saved match data and updated stats for ${a} mode.`),h()}))}))}})),document.getElementById("exportStatsBtn").addEventListener("click",(async function(){try{const e=["normal","special","custom"],t=["currentSkid"];e.forEach((e=>{t.push(c("matchHistory",m,e)),t.push(c("gamesJoined",m,e)),t.push(c("gamesStarted",m,e)),t.push(c("gamesQuit",m,e)),t.push(c("matchesCompleted",m,e))}));const a=await new Promise((e=>{chrome.storage.sync.get(t,e)})),s={};e.forEach((e=>{const t=a[c("matchHistory",m,e)]||[];let n=0,o=0,l=0,i=0,d=0,r=0,h=0,u=0,g=0,p=0,S=0,y=0,E=0,k=0;t.forEach((e=>{if(e.kills>=3&&n++,e.kills>=5&&o++,e.kills>=7&&l++,e.kills>=10&&i++,e.kills>=15&&d++,e.kills>=20&&r++,e.kills>=25&&h++,e.kills>=30&&u++,e.killTimestamps&&e.killTimestamps.length>0){let t=1,a=e.killTimestamps[0];for(let s=1;s<e.killTimestamps.length;s++){const n=e.killTimestamps[s];n-a<=3e3?(t++,2===t&&g++,3===t&&p++,4===t&&S++,5===t&&y++,6===t&&E++,7===t&&k++):t=1,a=n}}})),s[e]={smashStreak:n,smashtacularStreak:o,smashosaurusStreak:l,smashlvaniaStreak:i,monsterSmashStreak:d,potatoStreak:r,smashSmashStreak:h,potoatachioStreak:u,doubleSmash:g,multiSmash:p,multiMegaSmash:S,multiMegaUltraSmash:y,gooseySmash:E,crazyMultiMegaUltraSmash:k}})),a.streaks=s;const n=await g(a),o={version:"1.2",timestamp:Date.now(),skid:m,hash:n,data:a},l=(new TextEncoder).encode(JSON.stringify(o)),i=new Blob([l],{type:"application/octet-stream"}),d=URL.createObjectURL(i),r=document.createElement("a");r.href=d,r.download=`smash_karts_stats_${m}_${(new Date).toISOString().split("T")[0]}.skmt`,document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(d)}catch(e){console.error("Error exporting stats:",e),alert("Failed to export stats. Please try again.")}})),document.getElementById("importStatsBtn").addEventListener("click",(()=>{document.getElementById("importStatsInput").click()})),document.getElementById("importStatsInput").addEventListener("change",(e=>{e.target.files.length>0&&(async function(e){try{const t=new FileReader;t.onload=async function(e){try{const t=(new TextDecoder).decode(e.target.result),a=JSON.parse(t);if(!["1.0","1.1","1.2"].includes(a.version))throw new Error("Unsupported stats file version");if(a.skid!==m)throw new Error("Stats file SKID does not match current SKID");if(await g(a.data)!==a.hash)throw new Error("Stats file has been tampered with");if(!confirm("Are you sure you want to import these stats? This will overwrite your current stats."))return;await new Promise((e=>{chrome.storage.sync.set(a.data,e)})),h(),alert("Stats imported successfully!")}catch(e){console.error("Error processing imported stats:",e),alert(e.message||"Failed to import stats. The file may be corrupted or invalid.")}},t.onerror=function(){alert("Error reading file. Please try again.")},t.readAsArrayBuffer(e)}catch(e){console.error("Error importing stats:",e),alert("Failed to import stats. Please try again.")}}(e.target.files[0]),e.target.value="")}))})();