(()=>{document.getElementById("kills"),document.getElementById("deaths"),document.getElementById("matches"),document.getElementById("matches-list");const e=document.getElementById("statsBtn"),t=document.getElementById("hudBtn"),a=document.getElementById("statsSection"),n=document.getElementById("hudSection");a.classList.add("active"),e.addEventListener("click",(()=>{e.classList.add("selected"),t.classList.remove("selected"),a.style.display="block",n.style.display="none"})),t.addEventListener("click",(()=>{t.classList.add("selected"),e.classList.remove("selected"),a.style.display="none",n.style.display="block"}));const s=document.getElementById("toggleDeathsHud"),o=document.getElementById("toggleKillStreakHud");function l(e){return e?new Date(e).toLocaleString(void 0,{hour:"2-digit",minute:"2-digit",second:"2-digit",year:"2-digit",month:"2-digit",day:"2-digit"}):"-"}function d(e,t){return 0===t?e>0?e.toFixed(2):"0.00":(e/t).toFixed(2)}function c(e){const t=Math.floor(e/1e3),a=Math.floor(t/3600),n=Math.floor(t%3600/60),s=t%60;return a>0?`${a}h ${n}m ${s}s`:n>0?`${n}m ${s}s`:`${s}s`}s.addEventListener("change",(function(){const e=this.checked;chrome.storage.sync.set({deathsHudEnabled:e}),chrome.tabs.query({active:!0,currentWindow:!0},(t=>{chrome.tabs.sendMessage(t[0].id,{type:"toggle-deaths-hud",enabled:e})}))})),o.addEventListener("change",(function(){const e=this.checked;chrome.storage.sync.set({killStreakHudEnabled:e}),chrome.tabs.query({active:!0,currentWindow:!0},(t=>{chrome.tabs.sendMessage(t[0].id,{type:"toggle-killstreak-hud",enabled:e})}))})),chrome.storage.sync.get(["deathsHudEnabled","killStreakHudEnabled"],(e=>{s.checked=!1!==e.deathsHudEnabled,o.checked=!1!==e.killStreakHudEnabled,chrome.tabs.query({active:!0,currentWindow:!0},(e=>{chrome.tabs.sendMessage(e[0].id,{type:"toggle-deaths-hud",enabled:s.checked}),chrome.tabs.sendMessage(e[0].id,{type:"toggle-killstreak-hud",enabled:o.checked})}))}));let r=null,m="normal",i="all",h={primaryStats:!1,secondaryStats:!1,averageStats:!1,streaks:!1,quickKills:!1};function u(e,t,a){const n=a||m;return"all"===n?null:`${e}_${t}_${n}`}function g(){document.getElementById("normalModeBtn").classList.toggle("selected","normal"===m),document.getElementById("specialModeBtn").classList.toggle("selected","special"===m),document.getElementById("customModeBtn").classList.toggle("selected","custom"===m),document.getElementById("allStatsBtn").classList.toggle("selected","all"===m),document.getElementById("primaryStatsHeader").textContent="all"===m?"All Modes Primary Stats":"Primary Stats",document.getElementById("secondaryStatsHeader").textContent="all"===m?"All Modes Secondary Stats":"Secondary Stats"}function p(){chrome.storage.sync.get(["currentSkid"],(e=>{r=e.currentSkid||"Default",document.getElementById("skidValue").textContent=r;const t=["currentSkid"];"all"===m?["normal","special","custom"].forEach((e=>{t.push(u("matchHistory",r,e)),t.push(u("gamesJoined",r,e)),t.push(u("gamesStarted",r,e)),t.push(u("gamesQuit",r,e)),t.push(u("matchesCompleted",r,e))})):(t.push(u("matchHistory",r,m)),t.push(u("gamesJoined",r,m)),t.push(u("gamesStarted",r,m)),t.push(u("gamesQuit",r,m)),t.push(u("matchesCompleted",r,m))),console.log("[SKMT][LOAD] Loading stats for SKID:",r,"Mode:",m,"Keys:",t),chrome.storage.sync.get(t,(e=>{console.log("[SKMT][LOAD] Data returned from chrome.storage.sync:",e),document.querySelector(".match-history").style.display="block",function(e,t){const a=e[u("matchHistory",r,t)]||[];let n=0,s=0,o=0;const m=new Map;"all"===t?["normal","special","custom"].forEach((t=>{(e[u("matchHistory",r,t)]||[]).forEach((e=>{if(e.map){const t=m.get(e.map)||0;m.set(e.map,t+1)}}))})):a.forEach((e=>{if(e.map){const t=m.get(e.map)||0;m.set(e.map,t+1)}}));const h=document.getElementById("mapFilter");h.innerHTML='<option value="all">All Maps</option>';const g=Array.from(m.entries()).sort(((e,t)=>t[1]-e[1]));g.forEach((([e,t])=>{const a=document.createElement("option");a.value=e,a.textContent=`${e} (${t})`,h.appendChild(a)})),h.value=i;const p=document.getElementById("mapsList");if(p.innerHTML="",g.forEach((([e,t])=>{const a=document.createElement("div");a.className="stat-card",a.innerHTML=`\n            <span class="stat-label">${e}</span>\n            <span class="stat-value">${t}</span>\n        `,p.appendChild(a)})),0===g.length){const e=document.createElement("div");e.className="no-maps",e.textContent="No maps played yet",p.appendChild(e)}let y=0,S=0,E=0,k=0,f=0,M=0,B=0,I=0,C=0,v=0,T=0,b=0,L=0,x=0,$=0,w=0,K=0,H=0,D=0,R=0,A=0,F=0;if("all"===t){const t=["normal","special","custom"],a={};t.forEach((t=>{const n=e[u("matchHistory",r,t)]||[];let s=0,o=0,l=0,d=e[u("gamesJoined",r,t)]||0,c=e[u("gamesStarted",r,t)]||0,m=e[u("gamesQuit",r,t)]||0,h=e[u("matchesCompleted",r,t)]||0;n.forEach((e=>{"all"!==i&&e.map!==i||(s+=e.kills||0,o+=e.deaths||0,l+=e.duration||(e.matchEndTime&&e.matchStartTime?e.matchEndTime-e.matchStartTime:0))})),a[t]={kills:s,deaths:o,timeSpent:l,gamesJoined:d,gamesStarted:c,gamesQuit:m,matchesCompleted:h,highestKillsRecord:0,highestDeathsRecord:0,highestKillStreakRecord:0,highestKDRRecord:0,smashStreak:0,smashtacularStreak:0,smashosaurusStreak:0,smashlvaniaStreak:0,monsterSmashStreak:0,potatoStreak:0,smashSmashStreak:0,potoatachioStreak:0,doubleSmash:0,multiSmash:0,multiMegaSmash:0,multiMegaUltraSmash:0,gooseySmash:0,crazyMultiMegaUltraSmash:0}})),t.forEach((e=>{const t=a[e];n+=t.kills,s+=t.deaths,o+=t.timeSpent,y+=t.gamesJoined,S+=t.gamesStarted,E+=t.gamesQuit,k+=t.matchesCompleted,C+=t.smashStreak,v+=t.smashtacularStreak,T+=t.smashosaurusStreak,b+=t.smashlvaniaStreak,L+=t.monsterSmashStreak,x+=t.potatoStreak,$+=t.smashSmashStreak,w+=t.potoatachioStreak,K+=t.doubleSmash,H+=t.multiSmash,D+=t.multiMegaSmash,R+=t.multiMegaUltraSmash,A+=t.gooseySmash,F+=t.crazyMultiMegaUltraSmash,t.highestKillsRecord>f&&(f=t.highestKillsRecord),t.highestDeathsRecord>M&&(M=t.highestDeathsRecord),t.highestKillStreakRecord>B&&(B=t.highestKillStreakRecord),t.highestKDRRecord>I&&(I=t.highestKDRRecord)}))}else a.forEach((e=>{"all"!==i&&e.map!==i||(n+=e.kills||0,s+=e.deaths||0,o+=e.duration||(e.matchEndTime&&e.matchStartTime?e.matchEndTime-e.matchStartTime:0))})),y=e[u("gamesJoined",r,t)]||0,S=e[u("gamesStarted",r,t)]||0,E=e[u("gamesQuit",r,t)]||0,k=e[u("matchesCompleted",r,t)]||0;document.getElementById("kills").textContent=n,document.getElementById("deaths").textContent=s,document.getElementById("kdr").textContent=d(n,s),document.getElementById("totalTimeSpent").textContent=c(o),document.getElementById("gamesJoined").textContent=y,document.getElementById("gamesStarted").textContent=S,document.getElementById("gamesQuit").textContent=E,document.getElementById("matchesCompleted").textContent=k,document.getElementById("totalMatches").textContent=y+E;const P=y+E,U=P>0?k/P*100:0,z=P>0?E/P*100:0;document.getElementById("matchesCompletedRate").textContent=`${U.toFixed(2)}%`,document.getElementById("matchesQuitRate").textContent=`${z.toFixed(2)}%`;const _=P>0?n/P:0,N=P>0?s/P:0,J=P>0?o/P:0;document.getElementById("avgKills").textContent=_.toFixed(2),document.getElementById("avgDeaths").textContent=N.toFixed(2),document.getElementById("avgTimeSpent").textContent=c(J),document.getElementById("highestKillsRecord").textContent=f,document.getElementById("highestDeathsRecord").textContent=M,document.getElementById("highestKillStreakRecord").textContent=B,document.getElementById("highestKDRRecord").textContent=I.toFixed(2),document.getElementById("smashStreak").textContent=C,document.getElementById("smashtacularStreak").textContent=v,document.getElementById("smashosaurusStreak").textContent=T,document.getElementById("smashlvaniaStreak").textContent=b,document.getElementById("monsterSmashStreak").textContent=L,document.getElementById("potatoStreak").textContent=x,document.getElementById("smashSmashStreak").textContent=$,document.getElementById("potoatachioStreak").textContent=w,document.getElementById("doubleSmash").textContent=K,document.getElementById("multiSmash").textContent=H,document.getElementById("multiMegaSmash").textContent=D,document.getElementById("multiMegaUltraSmash").textContent=R,document.getElementById("gooseySmash").textContent=A,document.getElementById("crazyMultiMegaUltraSmash").textContent=F,document.getElementById("streaksHeader").textContent="all"===t?"All Modes Streaks (Without Dying)":"Streaks (Without Dying)",document.getElementById("quickKillsHeader").textContent="all"===t?"All Modes Streaks (Quick Kills)":"Streaks (Quick Kills)",document.getElementById("killsLabel").textContent="all"===t?"Total Kills":"Kills",document.getElementById("deathsLabel").textContent="all"===t?"Total Deaths":"Deaths",document.getElementById("kdrLabel").textContent="all"===t?"Overall KDR":"KDR",document.getElementById("matchesCompletedLabel").textContent="all"===t?"Total Matches Completed":"Matches Completed",document.getElementById("totalTimeSpentLabel").textContent="all"===t?"Total Time Played":"Time Played",document.getElementById("gamesJoinedLabel").textContent="all"===t?"Total Matches Joined":"Matches Joined",document.getElementById("totalMatchesLabel").textContent="Total Matches (Completed + Quit)",document.getElementById("averageStatsHeader").textContent="all"===t?"All Modes Average Stats":"Average Stats";const q=document.getElementById("matches-list");if(q.innerHTML="","all"===t){const t=[];modes.forEach((a=>{(e[u("matchHistory",r,a)]||[]).forEach((e=>{t.push({...e,mode:a})}))})),t.sort(((e,t)=>t.matchStartTime-e.matchStartTime)),t.forEach(((e,a)=>{const n=document.createElement("div");n.className="match-card";const s=document.createElement("div");s.className="match-card-content";const o=document.createElement("div");if(o.className="match-meta",o.textContent=`#${t.length-a} | ${l(e.matchStartTime)} - ${l(e.matchEndTime)}`,s.appendChild(o),e.map){const t=document.createElement("div");t.className="match-map",t.textContent=e.map,s.appendChild(t)}const c=document.createElement("div");c.className="match-stats",c.innerHTML="",c.innerHTML+=`<span>Kills:</span><b>${e.kills}</b>`,c.innerHTML+=`<span>Deaths:</span><b>${e.deaths}</b>`,c.innerHTML+=`<span>KDR:</span><b>${d(e.kills,e.deaths)}</b>`;const r=e.duration||(e.matchEndTime&&e.matchStartTime?e.matchEndTime-e.matchStartTime:0),m=Math.floor(r/36e5),i=Math.floor(r%36e5/6e4),h=Math.floor(r%6e4/1e3);let u;u=m>0?`${m}h ${i}m ${h}s`:`${i}m ${h}s`,c.innerHTML+=`<span>Duration:</span><b>${u}</b>`,s.appendChild(c);const g=document.createElement("div");g.className="match-flags",e.quit&&(g.innerHTML+='<span class="flag quit">Quit</span>'),e.started&&(g.innerHTML+='<span class="flag started">Started</span>'),e.joined&&(g.innerHTML+='<span class="flag joined">Joined</span>'),s.appendChild(g),n.appendChild(s),q.appendChild(n)}))}else a.slice().reverse().forEach(((e,t)=>{const n=document.createElement("div");n.className="match-card";const s=document.createElement("div");s.className="match-card-content";const o=document.createElement("div");if(o.className="match-meta",o.textContent=`#${a.length-t} | ${l(e.matchStartTime)} - ${l(e.matchEndTime)}`,s.appendChild(o),e.map){const t=document.createElement("div");t.className="match-map",t.textContent=e.map,s.appendChild(t)}const c=document.createElement("div");c.className="match-stats",c.innerHTML="",c.innerHTML+=`<span>Kills:</span><b>${e.kills}</b>`,c.innerHTML+=`<span>Deaths:</span><b>${e.deaths}</b>`,c.innerHTML+=`<span>KDR:</span><b>${d(e.kills,e.deaths)}</b>`;const r=e.duration||(e.matchEndTime&&e.matchStartTime?e.matchEndTime-e.matchStartTime:0),m=Math.floor(r/36e5),i=Math.floor(r%36e5/6e4),h=Math.floor(r%6e4/1e3);let u;u=m>0?`${m}h ${i}m ${h}s`:`${i}m ${h}s`,c.innerHTML+=`<span>Duration:</span><b>${u}</b>`,s.appendChild(c);const g=document.createElement("div");g.className="match-flags",e.quit&&(g.innerHTML+='<span class="flag quit">Quit</span>'),e.started&&(g.innerHTML+='<span class="flag started">Started</span>'),e.joined&&(g.innerHTML+='<span class="flag joined">Joined</span>'),s.appendChild(g),n.appendChild(s),q.appendChild(n)}))}(e,m)}))}))}document.addEventListener("DOMContentLoaded",(()=>{document.getElementById("normalModeBtn").addEventListener("click",(()=>{m="normal",g(),p()})),document.getElementById("specialModeBtn").addEventListener("click",(()=>{m="special",g(),p()})),document.getElementById("customModeBtn").addEventListener("click",(()=>{m="custom",g(),p()})),document.getElementById("allStatsBtn").addEventListener("click",(()=>{m="all",g(),p()})),document.querySelectorAll(".stats-details").forEach((e=>{e.addEventListener("toggle",(()=>{document.querySelectorAll(".stats-details").forEach((e=>{const t=e.querySelector(".stats-section-label").id;h[t]=e.hasAttribute("open")})),chrome.storage.local.set({openSections:h})}))})),document.getElementById("exportStatsBtn").addEventListener("click",k),document.getElementById("importStatsBtn").addEventListener("click",(()=>{document.getElementById("importStatsInput").click()})),document.getElementById("importStatsInput").addEventListener("change",(e=>{e.target.files.length>0&&(async function(e){try{const t=new FileReader;t.onload=async function(e){try{const t=(new TextDecoder).decode(e.target.result),a=await async function(e){try{await E();const t=e.match(/^SKMT_ENCRYPTED_v(\d+\.\d+)_(.+)$/);if(!t)throw new Error("Invalid encrypted data format");if(t[1]!==y)throw new Error("Incompatible encryption version");const a=t[2],n=new Uint8Array(atob(a).split("").map((e=>e.charCodeAt(0)))),s=n.slice(0,12),o=n.slice(12),l=await crypto.subtle.decrypt({name:"AES-GCM",iv:s},S,o),d=new TextDecoder;return JSON.parse(d.decode(l))}catch(e){throw console.error("Decryption error:",e),new Error("Failed to decrypt data")}}(t);if(a.skid!==r)throw new Error("Stats file SKID does not match current SKID");const n=31536e6;if(Date.now()-a.timestamp>n)throw new Error("Stats file is too old");if(!confirm("Are you sure you want to import these stats? This will overwrite your current stats."))return;if(await new Promise((e=>{chrome.storage.sync.set(a.data,e)})),a.data.uiState){const e=a.data.uiState;e.currentMode&&(m=e.currentMode,document.querySelectorAll(".mode-btn").forEach((e=>{e.classList.toggle("active",e.dataset.mode===m)}))),e.openSections&&await new Promise((t=>{chrome.storage.local.set({openSections:e.openSections},t)}))}p(),alert("Stats imported successfully!")}catch(e){console.error("Error processing imported stats:",e),alert(e.message||"Failed to import stats. The file may be corrupted or invalid.")}},t.onerror=function(){alert("Error reading file. Please try again.")},t.readAsArrayBuffer(e)}catch(e){console.error("Error importing stats:",e),alert("Failed to import stats. Please try again.")}}(e.target.files[0]),e.target.value="")})),document.getElementById("visualizeStatsBtn").addEventListener("click",(()=>{console.log("[SKMT] Visualize Stats button clicked");const e=document.getElementById("visualizeStatsBtn");e.disabled=!0;try{chrome.runtime.sendMessage({type:"OPEN_VISUALIZERS"},(t=>(e.disabled=!1,chrome.runtime.lastError?(console.error("[SKMT] Error opening visualizers:",chrome.runtime.lastError),void alert("Failed to open visualizers: "+chrome.runtime.lastError.message)):t?t.success?void console.log("[SKMT] Successfully opened visualizers in tab:",t.tabId):(console.error("[SKMT] Failed to open visualizers:",t.error),void alert("Failed to open visualizers: "+(t.error||"Unknown error"))):(console.error("[SKMT] No response received from background script"),void alert("Failed to open visualizers: No response received")))))}catch(t){e.disabled=!1,console.error("[SKMT] Error sending message:",t),alert("Failed to open visualizers: "+t.message)}})),document.getElementById("resetStatsBtn").addEventListener("click",(function(){if(!r)return;const e=[],t="all"===m?["normal","special","custom"]:[m];if(confirm(`Are you sure you want to reset all stats and match history for ${"all"===m?"all modes":"this mode"} and SKID?`)){t.forEach((t=>{e.push(u("matchHistory",r,t)),e.push(u("gamesJoined",r,t)),e.push(u("gamesStarted",r,t)),e.push(u("gamesQuit",r,t)),e.push(u("matchesCompleted",r,t))}));const a={};e.forEach((e=>a[e]=e.includes("matchHistory")?[]:0)),chrome.storage.sync.set(a,(()=>{console.log("[SKMT][RESET] Stats reset for",t,"mode(s)."),p()}))}})),g(),p(),chrome.storage.local.get(["openSections"],(e=>{e.openSections&&(h=e.openSections,Object.entries(h).forEach((([e,t])=>{const a=document.querySelector(`.stats-details:has(#${e})`);a&&(t?a.setAttribute("open",""):a.removeAttribute("open"))})))}))})),chrome.storage.onChanged.addListener(((e,t)=>{"sync"===t&&r&&Object.keys(e).some((e=>e.includes(`_${r}_`)))&&p()})),chrome.runtime.onMessage.addListener((function(e,t,a){if("SKMT_SKID_UPDATED"===e.type)p();else if("SKMT_MATCH_COMPLETE"===e.type){console.log("[SKMT][POPUP] Received MATCH_COMPLETE message:",e.data);const t=e.data,a=t.isSpecialMode?"special":t.isCustomMode?"custom":"normal",n=r||"Default",s=u("matchHistory",n,a),o=u("gamesJoined",n,a),l=u("gamesStarted",n,a),d=u("gamesQuit",n,a),c=u("matchesCompleted",n,a);chrome.storage.sync.get([s,o,l,d,c],(e=>{let n=e[s]||[],r=e[o]||0,m=e[l]||0,i=e[d]||0,h=e[c]||0;console.log(`[SKMT][POPUP] Before update - Mode: ${a}, Games Joined: ${r}, Games Started: ${m}, Games Quit: ${i}, Matches Completed: ${h}`),n.push(t),t.joined&&r++,t.started&&m++,t.quit&&i++,t.quit||h++,console.log(`[SKMT][POPUP] After update - Mode: ${a}, Games Joined: ${r}, Games Started: ${m}, Games Quit: ${i}, Matches Completed: ${h}`);const u={};u[s]=n,u[o]=r,u[l]=m,u[d]=i,u[c]=h,chrome.storage.sync.set(u,(()=>{console.log(`[SKMT][POPUP] Saved match data and updated stats for ${a} mode.`),p()}))}))}}));const y="1.4";let S=null;async function E(){return S||(S=await async function(){const e=(new TextEncoder).encode("SKMT_SECURE_SALT_v1.4"),t=await crypto.subtle.digest("SHA-256",e);return await crypto.subtle.importKey("raw",t,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}()),S}async function k(){try{const e=["normal","special","custom"],t=["currentSkid"];e.forEach((e=>{t.push(u("matchHistory",r,e)),t.push(u("gamesJoined",r,e)),t.push(u("gamesStarted",r,e)),t.push(u("gamesQuit",r,e)),t.push(u("matchesCompleted",r,e))}));const a=await new Promise((e=>{chrome.storage.sync.get(t,e)})),n=await new Promise((e=>{chrome.storage.local.get(["openSections"],e)})),s={};e.forEach((e=>{const t=a[u("matchHistory",r,e)]||[];let n=0,o=0,l=0,d=0,c=0,m=0,i=0,h=0,g=0,p=0,y=0,S=0,E=0,k=0,f=0,M=0,B=0,I=0;t.forEach((e=>{e.kills>=3&&n++,e.kills>=5&&o++,e.kills>=7&&l++,e.kills>=10&&d++,e.kills>=15&&c++,e.kills>=20&&m++,e.kills>=25&&i++,e.kills>=30&&h++,e.kills>f&&(f=e.kills),e.deaths>M&&(M=e.deaths);const t=e.deaths>0?e.kills/e.deaths:e.kills;if(t>I&&(I=t),e.killTimestamps&&e.killTimestamps.length>0){let t=0,a=0;const n=[];e.killTimestamps&&e.killTimestamps.forEach((e=>n.push({type:"kill",time:e}))),e.deathTimestamps&&e.deathTimestamps.forEach((e=>n.push({type:"death",time:e}))),n.sort(((e,t)=>e.time-t.time)),n.forEach((e=>{"death"===e.type?(t>a&&(a=t),t=0):"kill"===e.type&&(t++,t>a&&(a=t))})),a>B&&(B=a)}if(e.killTimestamps&&e.killTimestamps.length>0){let t=1,a=e.killTimestamps[0];for(let n=1;n<e.killTimestamps.length;n++){const s=e.killTimestamps[n];s-a<=4e3?(t++,2===t&&g++,3===t&&p++,4===t&&y++,5===t&&S++,6===t&&E++,7===t&&k++):t=1,a=s}}})),s[e]={smashStreak:n,smashtacularStreak:o,smashosaurusStreak:l,smashlvaniaStreak:d,monsterSmashStreak:c,potatoStreak:m,smashSmashStreak:i,potoatachioStreak:h,doubleSmash:g,multiSmash:p,multiMegaSmash:y,multiMegaUltraSmash:S,gooseySmash:E,crazyMultiMegaUltraSmash:k,highestKillsRecord:f,highestDeathsRecord:M,highestKillStreakRecord:B,highestKDRRecord:I}})),a.stats=s,a.uiState={currentMode:m,openSections:n.openSections||{},skid:r};const o={version:y,timestamp:Date.now(),skid:r,data:a},l=await async function(e){try{await E();const t=crypto.getRandomValues(new Uint8Array(12)),a=(new TextEncoder).encode(JSON.stringify(e)),n=await crypto.subtle.encrypt({name:"AES-GCM",iv:t},S,a),s=new Uint8Array(t.length+n.byteLength);s.set(t),s.set(new Uint8Array(n),t.length);const o=btoa(String.fromCharCode.apply(null,s));return`SKMT_ENCRYPTED_v${y}_${o}`}catch(e){throw console.error("Encryption error:",e),new Error("Failed to encrypt data")}}(o),d=new Blob([l],{type:"application/octet-stream"}),c=URL.createObjectURL(d),i=document.createElement("a");i.href=c,i.download=`smash_karts_stats_${r}_${(new Date).toISOString().split("T")[0]}.skmt`,document.body.appendChild(i),i.click(),document.body.removeChild(i),URL.revokeObjectURL(c)}catch(e){console.error("Error exporting stats:",e),alert("Failed to export stats. Please try again.")}}document.getElementById("closeMatchInfoModal")&&(document.getElementById("closeMatchInfoModal").onclick=function(){document.getElementById("matchInfoModal").style.display="none"}),document.getElementById("matchInfoModal")&&(document.getElementById("matchInfoModal").onclick=function(e){e.target===this&&(this.style.display="none")});let f=null;function M(){const e=document.getElementById("hudSettingsModal");document.getElementById("hudSettingsTitle").textContent=("deaths"===f?"Deaths":"Kill Streak")+" HUD Settings";const t=`${f}HudSettings`;chrome.storage.sync.get([t],(e=>{const a=e[t]||{fontSize:32,fontColor:"#ffffff",fontFamily:"Arial, sans-serif"};document.getElementById("hudFontSize").value=a.fontSize,document.getElementById("fontSizeValue").textContent=`${a.fontSize}px`,document.getElementById("hudFontColor").value=a.fontColor,document.getElementById("hudFontFamily").value=a.fontFamily})),e.style.display="flex"}function B(){const e={fontSize:document.getElementById("hudFontSize").value,fontColor:document.getElementById("hudFontColor").value,fontFamily:document.getElementById("hudFontFamily").value},t=`${f}HudSettings`;chrome.storage.sync.set({[t]:e}),chrome.tabs.query({active:!0,currentWindow:!0},(t=>{chrome.tabs.sendMessage(t[0].id,{type:`update-${f}-hud-style`,settings:e})}))}document.getElementById("deathsHudSettings").addEventListener("click",(()=>{f="deaths",M()})),document.getElementById("killStreakHudSettings").addEventListener("click",(()=>{f="killstreak",M()})),document.getElementById("closeHudSettingsModal").addEventListener("click",(()=>{document.getElementById("hudSettingsModal").style.display="none"})),document.getElementById("hudSettingsModal").addEventListener("click",(e=>{e.target===document.getElementById("hudSettingsModal")&&(document.getElementById("hudSettingsModal").style.display="none")})),document.getElementById("hudFontSize").addEventListener("input",(e=>{const t=e.target.value;document.getElementById("fontSizeValue").textContent=`${t}px`,B()})),document.getElementById("hudFontColor").addEventListener("change",B),document.getElementById("hudFontFamily").addEventListener("change",B),document.getElementById("mapFilter").addEventListener("change",(function(){i=this.value,p()}))})();