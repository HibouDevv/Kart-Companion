(()=>{document.getElementById("kills"),document.getElementById("deaths"),document.getElementById("matches"),document.getElementById("matches-list");const e=document.getElementById("statsBtn"),t=document.getElementById("hudBtn"),n=document.getElementById("statsSection"),a=document.getElementById("hudSection");n.classList.add("active"),e.addEventListener("click",(()=>{e.classList.add("selected"),t.classList.remove("selected"),n.style.display="block",a.style.display="none"})),t.addEventListener("click",(()=>{t.classList.add("selected"),e.classList.remove("selected"),n.style.display="none",a.style.display="block"}));const s=document.getElementById("toggleDeathsHud"),o=document.getElementById("toggleKillStreakHud");function l(e){return e?new Date(e).toLocaleString(void 0,{hour:"2-digit",minute:"2-digit",second:"2-digit",year:"2-digit",month:"2-digit",day:"2-digit"}):"-"}function i(e,t){return 0===t?e>0?e.toFixed(2):"0.00":(e/t).toFixed(2)}function c(e){const t=Math.floor(e/1e3),n=Math.floor(t/3600),a=Math.floor(t%3600/60),s=t%60;return n>0?`${n}h ${a}m ${s}s`:a>0?`${a}m ${s}s`:`${s}s`}s.addEventListener("change",(function(){const e=this.checked;chrome.storage.sync.set({deathsHudEnabled:e}),chrome.tabs.query({active:!0,currentWindow:!0},(t=>{chrome.tabs.sendMessage(t[0].id,{type:"toggle-deaths-hud",enabled:e})}))})),o.addEventListener("change",(function(){const e=this.checked;chrome.storage.sync.set({killStreakHudEnabled:e}),chrome.tabs.query({active:!0,currentWindow:!0},(t=>{chrome.tabs.sendMessage(t[0].id,{type:"toggle-killstreak-hud",enabled:e})}))})),chrome.storage.sync.get(["deathsHudEnabled","killStreakHudEnabled"],(e=>{s.checked=!1!==e.deathsHudEnabled,o.checked=!1!==e.killStreakHudEnabled,chrome.tabs.query({active:!0,currentWindow:!0},(e=>{chrome.tabs.sendMessage(e[0].id,{type:"toggle-deaths-hud",enabled:s.checked}),chrome.tabs.sendMessage(e[0].id,{type:"toggle-killstreak-hud",enabled:o.checked})}))}));let d="Default",m="normal",r="all",h={primaryStats:!1,secondaryStats:!1,averageStats:!1,streaks:!1,quickKills:!1};function u(e,t,n){const a=n||m;return"all"===a?null:`${e}_${t}_${a}`}function p(){document.getElementById("normalModeBtn").classList.toggle("selected","normal"===m),document.getElementById("specialModeBtn").classList.toggle("selected","special"===m),document.getElementById("customModeBtn").classList.toggle("selected","custom"===m),document.getElementById("allStatsBtn").classList.toggle("selected","all"===m),document.getElementById("primaryStatsHeader").textContent="all"===m?"All Modes Primary Stats":"Primary Stats",document.getElementById("secondaryStatsHeader").textContent="all"===m?"All Modes Secondary Stats":"Secondary Stats"}function g(){chrome.storage.sync.get(["currentSkid"],(e=>{d=e.currentSkid||"Default",document.getElementById("skidValue").textContent=d;const t=["currentSkid"];"all"===m?["normal","special","custom"].forEach((e=>{t.push(u("matchHistory",d,e)),t.push(u("gamesJoined",d,e)),t.push(u("gamesStarted",d,e)),t.push(u("gamesQuit",d,e)),t.push(u("matchesCompleted",d,e))})):(t.push(u("matchHistory",d,m)),t.push(u("gamesJoined",d,m)),t.push(u("gamesStarted",d,m)),t.push(u("gamesQuit",d,m)),t.push(u("matchesCompleted",d,m))),console.log("[SKMT][LOAD] Loading stats for SKID:",d,"Mode:",m,"Keys:",t),chrome.storage.sync.get(t,(e=>{console.log("[SKMT][LOAD] Data returned from chrome.storage.sync:",e),document.querySelector(".match-history").style.display="block",function(e,t){let n=[],a=new Map;"all"===t?["normal","special","custom"].forEach((t=>{const s=e[u("matchHistory",d,t)]||[];n=n.concat(s),s.forEach((e=>{if(e.map){const t=a.get(e.map)||0;a.set(e.map,t+1)}}))})):(n=e[u("matchHistory",d,t)]||[],n.forEach((e=>{if(e.map){const t=a.get(e.map)||0;a.set(e.map,t+1)}})));const s=document.getElementById("mapFilter"),o=s.value||"all";s.innerHTML='<option value="all">All Maps</option>',Array.from(a.entries()).sort(((e,t)=>t[1]-e[1])).forEach((([e,t])=>{const n=document.createElement("option");n.value=e,n.textContent=e,s.appendChild(n)})),[...s.options].some((e=>e.value===o))?(s.value=o,r=o):(s.value="all",r="all");const m="all"===r?n:n.filter((e=>e.map===r));let h=0,p=0,g=0;m.forEach((e=>{h+=e.kills||0,p+=e.deaths||0,g+=e.duration||(e.matchEndTime&&e.matchStartTime?e.matchEndTime-e.matchStartTime:0)}));const E=document.getElementById("mapsList");E.innerHTML="";const S=Array.from(a.entries()).sort(((e,t)=>t[1]-e[1]));if(S.forEach((([e,t])=>{const n=document.createElement("div");n.className="stat-card",n.innerHTML=`\n            <span class="stat-label">${e}</span>\n            <span class="stat-value">${t}</span>\n        `,E.appendChild(n)})),0===S.length){const e=document.createElement("div");e.className="no-maps",e.textContent="No maps played yet in this mode",E.appendChild(e)}let f=0,k=0,M=0,C=0,B=0,I=0,T=0,b=0,x=0,w=0,L=0,$=0,H=0,D=0,K=0,A=0,F=0,P=0,R=0,N=0,U=0,q=0,z=0;m.forEach((e=>{e.kills>B&&(B=e.kills),e.deaths>I&&(I=e.deaths);const t=e.deaths>0?e.kills/e.deaths:e.kills;t>b&&(b=t);const n=e.duration||(e.matchEndTime&&e.matchStartTime?e.matchEndTime-e.matchStartTime:0);if(n>x&&(x=n),e.killTimestamps&&e.killTimestamps.length>0){let t=0,n=0;const a=[];e.killTimestamps&&e.killTimestamps.forEach((e=>a.push({type:"kill",time:e}))),e.deathTimestamps&&e.deathTimestamps.forEach((e=>a.push({type:"death",time:e}))),a.sort(((e,t)=>e.time-t.time)),a.forEach((e=>{"death"===e.type?(t>n&&(n=t),t=0):"kill"===e.type&&(t++,t>n&&(n=t))})),n>T&&(T=n)}let a=0,s=null,o=0,l={};const i=[];e.killTimestamps&&e.killTimestamps.forEach((e=>i.push({type:"kill",time:e}))),e.deathTimestamps&&e.deathTimestamps.forEach((e=>i.push({type:"death",time:e}))),i.sort(((e,t)=>e.time-t.time)),i.forEach((e=>{"death"===e.type?(a=0,l={},o=0):"kill"===e.type&&(a++,a>=3&&!l[3]&&(w++,l[3]=!0),a>=5&&!l[5]&&(L++,l[5]=!0),a>=7&&!l[7]&&($++,l[7]=!0),a>=10&&!l[10]&&(H++,l[10]=!0),a>=15&&!l[15]&&(D++,l[15]=!0),a>=20&&!l[20]&&(K++,l[20]=!0),a>=25&&!l[25]&&(A++,l[25]=!0),a>=30&&!l[30]&&(F++,l[30]=!0),s&&e.time-s<=4e3?(o++,2===o&&P++,3===o&&R++,4===o&&N++,5===o&&U++,6===o&&q++,7===o&&z++):o=1,s=e.time)})),e.joined&&f++,e.started&&k++,e.quit&&M++,e.quit||C++})),document.getElementById("highestKillsRecord").textContent=B,document.getElementById("highestDeathsRecord").textContent=I,document.getElementById("highestKillStreakRecord").textContent=T,document.getElementById("highestKDRRecord").textContent=b.toFixed(2),document.getElementById("longestTimePlayedRecord").textContent=c(x),document.getElementById("smashStreak").textContent=w,document.getElementById("smashtacularStreak").textContent=L,document.getElementById("smashosaurusStreak").textContent=$,document.getElementById("smashlvaniaStreak").textContent=H,document.getElementById("monsterSmashStreak").textContent=D,document.getElementById("potatoStreak").textContent=K,document.getElementById("smashSmashStreak").textContent=A,document.getElementById("potoatachioStreak").textContent=F,document.getElementById("doubleSmash").textContent=P,document.getElementById("multiSmash").textContent=R,document.getElementById("multiMegaSmash").textContent=N,document.getElementById("multiMegaUltraSmash").textContent=U,document.getElementById("gooseySmash").textContent=q,document.getElementById("crazyMultiMegaUltraSmash").textContent=z,document.getElementById("streaksHeader").textContent="all"===t?"All Modes Streaks (Without Dying)":"Streaks (Without Dying)",document.getElementById("quickKillsHeader").textContent="all"===t?"All Modes Streaks (Quick Kills)":"Streaks (Quick Kills)";const V=(C||0)+(M||0);document.getElementById("killsLabel").textContent="all"===t?"Total Kills":"Kills",document.getElementById("deathsLabel").textContent="all"===t?"Total Deaths":"Deaths",document.getElementById("kdrLabel").textContent="all"===t?"Overall KDR":"KDR",document.getElementById("matchesCompletedLabel").textContent="all"===t?"Total Matches Completed":"Matches Completed",document.getElementById("totalTimeSpentLabel").textContent="all"===t?"Total Time Played":"Time Played",document.getElementById("gamesJoinedLabel").textContent="all"===t?"Total Matches Joined":"Matches Joined",document.getElementById("totalMatchesLabel").textContent="Total Matches (Completed + Quit)",console.log("[SKMT][POPUP][DISPLAY] Updating gamesQuit display. Value:",M,"Element:",document.getElementById("gamesQuit")),document.getElementById("kills").textContent=h,document.getElementById("deaths").textContent=p,document.getElementById("kdr").textContent=i(h,p),document.getElementById("totalTimeSpent").textContent=c(g),document.getElementById("gamesJoined").textContent=f,document.getElementById("gamesStarted").textContent=k,document.getElementById("gamesQuit").textContent=M,document.getElementById("matchesCompleted").textContent=C,document.getElementById("totalMatches").textContent=V;const _=V,O=_>0?(C||0)/_*100:0,Q=_>0?(M||0)/_*100:0;document.getElementById("matchesCompletedRate").textContent=`${O.toFixed(2)}%`,document.getElementById("matchesQuitRate").textContent=`${Q.toFixed(2)}%`;const J=_>0?h/_:0,j=_>0?p/_:0,G=_>0?g/_:0;document.getElementById("avgKills").textContent=J.toFixed(2),document.getElementById("avgDeaths").textContent=j.toFixed(2),document.getElementById("avgTimeSpent").textContent=c(G),document.getElementById("averageStatsHeader").textContent="all"===t?"All Modes Average Stats":"Average Stats";const W=document.getElementById("matches-list");if(W.innerHTML="","all"===t){const t=[];["normal","special","custom"].forEach((n=>{(e[u("matchHistory",d,n)]||[]).forEach((e=>{t.push({...e,mode:n})}))})),t.sort(((e,t)=>{const n=e.matchStartTime||e.startTime||0;return(t.matchStartTime||t.startTime||0)-n})),t.forEach(((e,n)=>{const a=document.createElement("div");a.className="match-card";const s=document.createElement("div");s.className="match-card-content";const o=document.createElement("div");if(o.className="match-meta",o.textContent=`#${t.length-n} | ${l(e.matchStartTime)} - ${l(e.matchEndTime)}`,s.appendChild(o),e.map){const t=document.createElement("div");t.className="match-map",t.textContent=e.map,s.appendChild(t)}const c=document.createElement("div");c.className="match-stats",c.innerHTML="",c.innerHTML+=`<span>Kills:</span><b>${e.kills}</b>`,c.innerHTML+=`<span>Deaths:</span><b>${e.deaths}</b>`,c.innerHTML+=`<span>KDR:</span><b>${i(e.kills,e.deaths)}</b>`;const d=e.duration||(e.matchEndTime&&e.matchStartTime?e.matchEndTime-e.matchStartTime:0),m=Math.floor(d/36e5),r=Math.floor(d%36e5/6e4),h=Math.floor(d%6e4/1e3);let u;u=m>0?`${m}h ${r}m ${h}s`:`${r}m ${h}s`,c.innerHTML+=`<span>Duration:</span><b>${u}</b>`,s.appendChild(c);const p=document.createElement("div");p.className="match-flags";let g=[];e.joined&&g.push("Joined"),e.started&&g.push("Started"),e.quit?g.push("Quit"):g.push("Completed"),e.isSpecialMode&&g.push("Special Mode"),e.isCustomMode&&g.push("Custom Match"),g.push(`${e.mode.charAt(0).toUpperCase()+e.mode.slice(1)} Mode`),g.length>0&&(p.textContent=g.join(" | ")),s.appendChild(p);const E=document.createElement("button");E.className="info-btn",E.title="View match information",E.innerHTML='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="10" cy="10" r="9" stroke="#3498db" stroke-width="2" fill="white"/><rect x="9" y="8" width="2" height="6" rx="1" fill="#3498db"/><rect x="9" y="5" width="2" height="2" rx="1" fill="#3498db"/></svg>',E.onclick=()=>v(e);const S=document.createElement("button");S.className="trash-btn",S.title="Delete this match",S.innerHTML='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 8V15M10 8V15M14 8V15M3 5H17M8 5V3H12V5M5 5V17C5 17.5523 5.44772 18 6 18H14C14.5523 18 15 17.5523 15 17V5" stroke="#e74c3c" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>',S.onclick=()=>y(t.length-1-n,e.mode),a.appendChild(s),a.appendChild(E),a.appendChild(S),W.appendChild(a)}))}else n.slice().reverse().forEach(((e,t)=>{const a=document.createElement("div");a.className="match-card";const s=document.createElement("div");s.className="match-card-content";const o=document.createElement("div");if(o.className="match-meta",o.textContent=`#${n.length-t} | ${l(e.matchStartTime)} - ${l(e.matchEndTime)}`,s.appendChild(o),e.map){const t=document.createElement("div");t.className="match-map",t.textContent=e.map,s.appendChild(t)}const c=document.createElement("div");c.className="match-stats",c.innerHTML="",c.innerHTML+=`<span>Kills:</span><b>${e.kills}</b>`,c.innerHTML+=`<span>Deaths:</span><b>${e.deaths}</b>`,c.innerHTML+=`<span>KDR:</span><b>${i(e.kills,e.deaths)}</b>`;const d=e.duration||(e.matchEndTime&&e.matchStartTime?e.matchEndTime-e.matchStartTime:0),m=Math.floor(d/36e5),r=Math.floor(d%36e5/6e4),h=Math.floor(d%6e4/1e3);let u;u=m>0?`${m}h ${r}m ${h}s`:`${r}m ${h}s`,c.innerHTML+=`<span>Duration:</span><b>${u}</b>`,s.appendChild(c);const p=document.createElement("div");p.className="match-flags";let g=[];e.joined&&g.push("Joined"),e.started&&g.push("Started"),e.quit?g.push("Quit"):g.push("Completed"),e.isSpecialMode&&g.push("Special Mode"),e.isCustomMode&&g.push("Custom Match"),g.length>0&&(p.textContent=g.join(" | ")),s.appendChild(p);const E=document.createElement("button");E.className="info-btn",E.title="View match information",E.innerHTML='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><circle cx="10" cy="10" r="9" stroke="#3498db" stroke-width="2" fill="white"/><rect x="9" y="8" width="2" height="6" rx="1" fill="#3498db"/><rect x="9" y="5" width="2" height="2" rx="1" fill="#3498db"/></svg>',E.onclick=()=>v(e);const S=document.createElement("button");S.className="trash-btn",S.title="Delete this match",S.innerHTML='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 8V15M10 8V15M14 8V15M3 5H17M8 5V3H12V5M5 5V17C5 17.5523 5.44772 18 6 18H14C14.5523 18 15 17.5523 15 17V5" stroke="#e74c3c" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>',S.onclick=()=>y(n.length-1-t),a.appendChild(s),a.appendChild(E),a.appendChild(S),W.appendChild(a)}))}(e,m)}))}))}function y(e,t){confirm("Are you sure you want to delete this match? This action cannot be undone.")&&chrome.storage.sync.get(["currentSkid"],(n=>{const a=n.currentSkid||"Default",s=t||m;if("all"===m&&!t)return void console.warn("[SKMT][DELETE] Cannot delete individual match in All Stats mode without mode specified.");const o=u("matchHistory",a,s);chrome.storage.sync.get([o],(t=>{let n=t[o]||[];if(e<0||e>=n.length)return;n.splice(e,1)[0];let l=0,i=0,c=0,d=0,m=0,r=0;n.forEach((e=>{l+=e.kills||0,i+=e.deaths||0,e.joined&&c++,e.started&&d++,e.quit&&m++,"special"===s&&e.isSpecialMode&&!e.quit&&r++,"normal"!==s||e.isSpecialMode||e.isCustomMode||e.quit||r++,"custom"===s&&e.isCustomMode&&!e.quit&&r++}));const h={};h[u("matchHistory",a,s)]=n,h[u("gamesJoined",a,s)]=c,h[u("gamesStarted",a,s)]=d,h[u("gamesQuit",a,s)]=m,h[u("matchesCompleted",a,s)]=r,chrome.storage.sync.set(h,g)}))}))}document.addEventListener("DOMContentLoaded",(()=>{document.getElementById("normalModeBtn").addEventListener("click",(()=>{m="normal",p(),g()})),document.getElementById("specialModeBtn").addEventListener("click",(()=>{m="special",p(),g()})),document.getElementById("customModeBtn").addEventListener("click",(()=>{m="custom",p(),g()})),document.getElementById("allStatsBtn").addEventListener("click",(()=>{m="all",p(),g()})),document.querySelectorAll(".stats-details").forEach((e=>{e.addEventListener("toggle",(()=>{document.querySelectorAll(".stats-details").forEach((e=>{const t=e.querySelector(".stats-section-label").id;h[t]=e.hasAttribute("open")})),chrome.storage.local.set({openSections:h})}))})),document.getElementById("exportStatsBtn").addEventListener("click",k),document.getElementById("importStatsBtn").addEventListener("click",(()=>{document.getElementById("importStatsInput").click()})),document.getElementById("importStatsInput").addEventListener("change",(e=>{e.target.files.length>0&&(async function(e){try{const t=new FileReader;t.onload=async function(e){try{const t=(new TextDecoder).decode(e.target.result),n=await async function(e){try{await f();const t=e.match(/^SKMT_ENCRYPTED_v(\d+\.\d+)_(.+)$/);if(!t)throw new Error("Invalid encrypted data format");if(t[1]!==E)throw new Error("Incompatible encryption version");const n=t[2],a=new Uint8Array(atob(n).split("").map((e=>e.charCodeAt(0)))),s=a.slice(0,12),o=a.slice(12),l=await crypto.subtle.decrypt({name:"AES-GCM",iv:s},S,o),i=new TextDecoder;return JSON.parse(i.decode(l))}catch(e){throw console.error("Decryption error:",e),new Error("Failed to decrypt data")}}(t);if(n.skid!==d)throw new Error("Stats file SKID does not match current SKID");const a=31536e6;if(Date.now()-n.timestamp>a)throw new Error("Stats file is too old");if(!confirm("Are you sure you want to import these stats? This will overwrite your current stats."))return;if(await new Promise((e=>{chrome.storage.sync.set(n.data,e)})),n.data.uiState){const e=n.data.uiState;e.currentMode&&(m=e.currentMode,document.querySelectorAll(".mode-btn").forEach((e=>{e.classList.toggle("active",e.dataset.mode===m)}))),e.openSections&&await new Promise((t=>{chrome.storage.local.set({openSections:e.openSections},t)}))}g(),alert("Stats imported successfully!")}catch(e){console.error("Error processing imported stats:",e),alert(e.message||"Failed to import stats. The file may be corrupted or invalid.")}},t.onerror=function(){alert("Error reading file. Please try again.")},t.readAsArrayBuffer(e)}catch(e){console.error("Error importing stats:",e),alert("Failed to import stats. Please try again.")}}(e.target.files[0]),e.target.value="")})),document.getElementById("visualizeStatsBtn").addEventListener("click",(()=>{console.log("[SKMT] Visualize Stats button clicked");const e=document.getElementById("visualizeStatsBtn");e.disabled=!0;try{chrome.runtime.sendMessage({type:"OPEN_VISUALIZERS"},(t=>(e.disabled=!1,chrome.runtime.lastError?(console.error("[SKMT] Error opening visualizers:",chrome.runtime.lastError),void alert("Failed to open visualizers: "+chrome.runtime.lastError.message)):t?t.success?void console.log("[SKMT] Successfully opened visualizers in tab:",t.tabId):(console.error("[SKMT] Failed to open visualizers:",t.error),void alert("Failed to open visualizers: "+(t.error||"Unknown error"))):(console.error("[SKMT] No response received from background script"),void alert("Failed to open visualizers: No response received")))))}catch(t){e.disabled=!1,console.error("[SKMT] Error sending message:",t),alert("Failed to open visualizers: "+t.message)}})),document.getElementById("resetStatsBtn").addEventListener("click",(function(){if(!d)return;const e=[],t="all"===m?["normal","special","custom"]:[m];if(confirm(`Are you sure you want to reset all stats and match history for ${"all"===m?"all modes":"this mode"} and SKID?`)){t.forEach((t=>{e.push(u("matchHistory",d,t)),e.push(u("gamesJoined",d,t)),e.push(u("gamesStarted",d,t)),e.push(u("gamesQuit",d,t)),e.push(u("matchesCompleted",d,t))}));const n={};e.forEach((e=>n[e]=e.includes("matchHistory")?[]:0)),chrome.storage.sync.set(n,(()=>{console.log("[SKMT][RESET] Stats reset for",t,"mode(s)."),g()}))}})),p(),g(),chrome.storage.local.get(["openSections"],(e=>{e.openSections&&(h=e.openSections,Object.entries(h).forEach((([e,t])=>{const n=document.querySelector(`.stats-details:has(#${e})`);n&&(t?n.setAttribute("open",""):n.removeAttribute("open"))})))}))})),chrome.storage.onChanged.addListener(((e,t)=>{"sync"===t&&d&&Object.keys(e).some((e=>e.includes(`_${d}_`)))&&g()})),chrome.runtime.onMessage.addListener((function(e,t,n){if("SKMT_SKID_UPDATED"===e.type)g();else if("SKMT_MATCH_COMPLETE"===e.type){console.log("[SKMT][POPUP] Received MATCH_COMPLETE message:",e.data);const t=e.data,n=t.isSpecialMode?"special":t.isCustomMode?"custom":"normal",a=d||"Default",s=u("matchHistory",a,n),o=u("gamesJoined",a,n),l=u("gamesStarted",a,n),i=u("gamesQuit",a,n),c=u("matchesCompleted",a,n);chrome.storage.sync.get([s,o,l,i,c],(e=>{let a=e[s]||[],d=e[o]||0,m=e[l]||0,r=e[i]||0,h=e[c]||0;console.log(`[SKMT][POPUP] Before update - Mode: ${n}, Games Joined: ${d}, Games Started: ${m}, Games Quit: ${r}, Matches Completed: ${h}`),a.push(t),t.joined&&d++,t.started&&m++,t.quit&&r++,t.quit||h++,console.log(`[SKMT][POPUP] After update - Mode: ${n}, Games Joined: ${d}, Games Started: ${m}, Games Quit: ${r}, Matches Completed: ${h}`);const u={};u[s]=a,u[o]=d,u[l]=m,u[i]=r,u[c]=h,chrome.storage.sync.set(u,(()=>{console.log(`[SKMT][POPUP] Saved match data and updated stats for ${n} mode.`),g()}))}))}}));const E="1.4";let S=null;async function f(){return S||(S=await async function(){const e=(new TextEncoder).encode("SKMT_SECURE_SALT_v1.4"),t=await crypto.subtle.digest("SHA-256",e);return await crypto.subtle.importKey("raw",t,{name:"AES-GCM",length:256},!1,["encrypt","decrypt"])}()),S}async function k(){try{const e=["normal","special","custom"],t=["currentSkid"];e.forEach((e=>{t.push(u("matchHistory",d,e)),t.push(u("gamesJoined",d,e)),t.push(u("gamesStarted",d,e)),t.push(u("gamesQuit",d,e)),t.push(u("matchesCompleted",d,e))}));const n=await new Promise((e=>{chrome.storage.sync.get(t,e)})),a=await new Promise((e=>{chrome.storage.local.get(["openSections"],e)})),s={};e.forEach((e=>{const t=n[u("matchHistory",d,e)]||[];let a=0,o=0,l=0,i=0,c=0,m=0,r=0,h=0,p=0,g=0,y=0,E=0,S=0,f=0,k=0,v=0,M=0,C=0;t.forEach((e=>{e.kills>=3&&a++,e.kills>=5&&o++,e.kills>=7&&l++,e.kills>=10&&i++,e.kills>=15&&c++,e.kills>=20&&m++,e.kills>=25&&r++,e.kills>=30&&h++,e.kills>k&&(k=e.kills),e.deaths>v&&(v=e.deaths);const t=e.deaths>0?e.kills/e.deaths:e.kills;if(t>C&&(C=t),e.killTimestamps&&e.killTimestamps.length>0){let t=0,n=0;const a=[];e.killTimestamps&&e.killTimestamps.forEach((e=>a.push({type:"kill",time:e}))),e.deathTimestamps&&e.deathTimestamps.forEach((e=>a.push({type:"death",time:e}))),a.sort(((e,t)=>e.time-t.time)),a.forEach((e=>{"death"===e.type?(t>n&&(n=t),t=0):"kill"===e.type&&(t++,t>n&&(n=t))})),n>M&&(M=n)}if(e.killTimestamps&&e.killTimestamps.length>0){let t=1,n=e.killTimestamps[0];for(let a=1;a<e.killTimestamps.length;a++){const s=e.killTimestamps[a];s-n<=4e3?(t++,2===t&&p++,3===t&&g++,4===t&&y++,5===t&&E++,6===t&&S++,7===t&&f++):t=1,n=s}}})),s[e]={smashStreak:a,smashtacularStreak:o,smashosaurusStreak:l,smashlvaniaStreak:i,monsterSmashStreak:c,potatoStreak:m,smashSmashStreak:r,potoatachioStreak:h,doubleSmash:p,multiSmash:g,multiMegaSmash:y,multiMegaUltraSmash:E,gooseySmash:S,crazyMultiMegaUltraSmash:f,highestKillsRecord:k,highestDeathsRecord:v,highestKillStreakRecord:M,highestKDRRecord:C}})),n.stats=s,n.uiState={currentMode:m,openSections:a.openSections||{},skid:d};const o={version:E,timestamp:Date.now(),skid:d,data:n},l=await async function(e){try{await f();const t=crypto.getRandomValues(new Uint8Array(12)),n=(new TextEncoder).encode(JSON.stringify(e)),a=await crypto.subtle.encrypt({name:"AES-GCM",iv:t},S,n),s=new Uint8Array(t.length+a.byteLength);s.set(t),s.set(new Uint8Array(a),t.length);const o=btoa(String.fromCharCode.apply(null,s));return`SKMT_ENCRYPTED_v${E}_${o}`}catch(e){throw console.error("Encryption error:",e),new Error("Failed to encrypt data")}}(o),i=new Blob([l],{type:"application/octet-stream"}),c=URL.createObjectURL(i),r=document.createElement("a");r.href=c,r.download=`smash_karts_stats_${d}_${(new Date).toISOString().split("T")[0]}.skmt`,document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(c)}catch(e){console.error("Error exporting stats:",e),alert("Failed to export stats. Please try again.")}}function v(e){const t=document.getElementById("matchInfoModal"),n=document.getElementById("match-info-modal-body");let a=[];e.joined&&a.push("Joined"),e.started&&a.push("Started"),e.quit?a.push("Quit"):a.push("Completed"),e.isSpecialMode&&a.push("Special Mode"),e.isCustomMode&&a.push("Custom Match"),e.mode&&a.push(`${e.mode.charAt(0).toUpperCase()+e.mode.slice(1)} Mode`);const s=e.duration||(e.matchEndTime&&e.matchStartTime?e.matchEndTime-e.matchStartTime:0);let o=[];Array.isArray(e.players)&&(o=[...new Set(e.players)]),n.innerHTML=`\n        <div class="match-info-title">Match Information</div>\n        ${e.map?`<div class="match-info-section"><span class="match-info-label">Map:</span><span class="match-info-value">${e.map}</span></div>`:""}\n        <div class="match-info-section"><span class="match-info-label">Start:</span><span class="match-info-value">${l(e.matchStartTime)}</span></div>\n        <div class="match-info-section"><span class="match-info-label">End:</span><span class="match-info-value">${l(e.matchEndTime)}</span></div>\n        <div class="match-info-section"><span class="match-info-label">Kills:</span><span class="match-info-value">${e.kills}</span></div>\n        <div class="match-info-section"><span class="match-info-label">Deaths:</span><span class="match-info-value">${e.deaths}</span></div>\n        <div class="match-info-section"><span class="match-info-label">KDR:</span><span class="match-info-value">${i(e.kills,e.deaths)}</span></div>\n        <div class="match-info-section"><span class="match-info-label">Duration:</span><span class="match-info-value">${c(s)}</span></div>\n        <div class="match-info-section">\n            <span class="match-info-label" style="display:block;margin-bottom:6px;">Detected Players In Room:</span>\n            <ul style="margin:0 0 0 12px;padding:0;list-style:disc;">\n                ${o.length>0?o.map((e=>`<li style='font-size:16px;'>${e}</li>`)).join(""):'<li style="color:#aaa;font-size:16px;">No players detected</li>'}\n            </ul>\n        </div>\n        <div class="match-info-indicators">${a.join(" | ")}</div>\n    `,t.style.display="flex"}document.getElementById("closeMatchInfoModal")&&(document.getElementById("closeMatchInfoModal").onclick=function(){document.getElementById("matchInfoModal").style.display="none"}),document.getElementById("matchInfoModal")&&(document.getElementById("matchInfoModal").onclick=function(e){e.target===this&&(this.style.display="none")});let M=null;function C(){const e=document.getElementById("hudSettingsModal");document.getElementById("hudSettingsTitle").textContent=("deaths"===M?"Deaths":"Kill Streak")+" HUD Settings";const t=`${M}HudSettings`;chrome.storage.sync.get([t],(e=>{const n=e[t]||{fontSize:32,fontColor:"#ffffff",fontFamily:"Arial, sans-serif"};document.getElementById("hudFontSize").value=n.fontSize,document.getElementById("fontSizeValue").textContent=`${n.fontSize}px`,document.getElementById("hudFontColor").value=n.fontColor,document.getElementById("hudFontFamily").value=n.fontFamily})),e.style.display="flex"}function B(){const e={fontSize:document.getElementById("hudFontSize").value,fontColor:document.getElementById("hudFontColor").value,fontFamily:document.getElementById("hudFontFamily").value},t=`${M}HudSettings`;chrome.storage.sync.set({[t]:e}),chrome.tabs.query({active:!0,currentWindow:!0},(t=>{chrome.tabs.sendMessage(t[0].id,{type:`update-${M}-hud-style`,settings:e})}))}document.getElementById("deathsHudSettings").addEventListener("click",(()=>{M="deaths",C()})),document.getElementById("killStreakHudSettings").addEventListener("click",(()=>{M="killstreak",C()})),document.getElementById("closeHudSettingsModal").addEventListener("click",(()=>{document.getElementById("hudSettingsModal").style.display="none"})),document.getElementById("hudSettingsModal").addEventListener("click",(e=>{e.target===document.getElementById("hudSettingsModal")&&(document.getElementById("hudSettingsModal").style.display="none")})),document.getElementById("hudFontSize").addEventListener("input",(e=>{const t=e.target.value;document.getElementById("fontSizeValue").textContent=`${t}px`,B()})),document.getElementById("hudFontColor").addEventListener("change",B),document.getElementById("hudFontFamily").addEventListener("change",B),document.getElementById("mapFilter").addEventListener("change",(function(e){r=e.target.value,g()}))})();