(()=>{document.getElementById("kills"),document.getElementById("deaths"),document.getElementById("matches"),document.getElementById("matches-list");const t=document.getElementById("statsBtn"),e=document.getElementById("hudBtn"),a=document.getElementById("statsSection");function s(t){return t?new Date(t).toLocaleString(void 0,{hour:"2-digit",minute:"2-digit",second:"2-digit",year:"2-digit",month:"2-digit",day:"2-digit"}):"-"}function n(t,e){return 0===e?t>0?t.toFixed(2):"0.00":(t/e).toFixed(2)}function o(t){const e=Math.floor(t/1e3),a=Math.floor(e/3600),s=Math.floor(e%3600/60),n=e%60;return a>0?`${a}h ${s}m ${n}s`:s>0?`${s}m ${n}s`:`${n}s`}a.classList.add("active"),t.addEventListener("click",(()=>{t.classList.add("selected"),e.classList.remove("selected"),a.classList.add("active")})),e.addEventListener("click",(()=>{e.classList.add("selected"),t.classList.remove("selected"),a.classList.remove("active")}));let l=null,m="normal",i={primaryStats:!1,secondaryStats:!1,averageStats:!1,streaks:!1,quickKills:!1};function d(t,e,a){const s=a||m;return"all"===s?null:`${t}_${e}_${s}`}function c(){document.getElementById("normalModeBtn").classList.toggle("selected","normal"===m),document.getElementById("specialModeBtn").classList.toggle("selected","special"===m),document.getElementById("customModeBtn").classList.toggle("selected","custom"===m),document.getElementById("allStatsBtn").classList.toggle("selected","all"===m),document.getElementById("primaryStatsHeader").textContent="all"===m?"All Modes Primary Stats":"Primary Stats",document.getElementById("secondaryStatsHeader").textContent="all"===m?"All Modes Secondary Stats":"Secondary Stats"}function r(){chrome.storage.sync.get(["currentSkid"],(t=>{l=t.currentSkid||"Default",document.getElementById("skidValue").textContent=l;const e=["currentSkid"];"all"===m?["normal","special","custom"].forEach((t=>{e.push(d("matchHistory",l,t)),e.push(d("gamesJoined",l,t)),e.push(d("gamesStarted",l,t)),e.push(d("gamesQuit",l,t)),e.push(d("matchesCompleted",l,t))})):(e.push(d("matchHistory",l,m)),e.push(d("gamesJoined",l,m)),e.push(d("gamesStarted",l,m)),e.push(d("gamesQuit",l,m)),e.push(d("matchesCompleted",l,m))),console.log("[SKMT][LOAD] Loading stats for SKID:",l,"Mode:",m,"Keys:",e),chrome.storage.sync.get(e,(t=>{console.log("[SKMT][LOAD] Data returned from chrome.storage.sync:",t),document.querySelector(".match-history").style.display="block",function(t,e){const a=t[d("matchHistory",l,e)]||[];let m=0,i=0,c=0,r=0,u=0,p=0,g=0,S=0,y=0,E=0,k=0,M=0,C=0,f=0,T=0,B=0,v=0,I=0,x=0,L=0,$=0;if("all"===e){const e=["normal","special","custom"],a={};e.forEach((e=>{const s=t[d("matchHistory",l,e)]||[];let n=0,o=0,m=0,i=t[d("gamesJoined",l,e)]||0,c=t[d("gamesStarted",l,e)]||0,r=t[d("gamesQuit",l,e)]||0,h=t[d("matchesCompleted",l,e)]||0,u=0,p=0,g=0,S=0,y=0,E=0,k=0,M=0,C=0,f=0,T=0,B=0,v=0,I=0;s.forEach((t=>{var e;n+=t.kills||0,o+=t.deaths||0,m+=(null===(e=t.playerStats)||void 0===e?void 0:e.timeSpent)||(t.endTime&&t.startTime?t.endTime-t.startTime:0)})),s.forEach((t=>{let e=0,a=null,s=0,n={};const o=[];t.killTimestamps&&t.killTimestamps.forEach((t=>o.push({type:"kill",time:t}))),t.deathTimestamps&&t.deathTimestamps.forEach((t=>o.push({type:"death",time:t}))),o.sort(((t,e)=>t.time-e.time)),o.forEach((t=>{"death"===t.type?(e=0,n={}):"kill"===t.type&&(e++,e>=3&&!n[3]&&(u++,n[3]=!0),e>=5&&!n[5]&&(p++,n[5]=!0),e>=7&&!n[7]&&(g++,n[7]=!0),e>=10&&!n[10]&&(S++,n[10]=!0),e>=15&&!n[15]&&(y++,n[15]=!0),e>=20&&!n[20]&&(E++,n[20]=!0),e>=25&&!n[25]&&(k++,n[25]=!0),e>=30&&!n[30]&&(M++,n[30]=!0),a&&t.time-a<=3e3?(s++,2===s&&C++,3===s&&f++,4===s&&T++,5===s&&B++,6===s&&v++,7===s&&I++):s=1,a=t.time)}))})),a[e]={kills:n,deaths:o,timeSpent:m,gamesJoined:i,gamesStarted:c,gamesQuit:r,matchesCompleted:h,smashStreak:u,smashtacularStreak:p,smashosaurusStreak:g,smashlvaniaStreak:S,monsterSmashStreak:y,potatoStreak:E,smashSmashStreak:k,potoatachioStreak:M,doubleSmash:C,multiSmash:f,multiMegaSmash:T,multiMegaUltraSmash:B,gooseySmash:v,crazyMultiMegaUltraSmash:I}})),e.forEach((t=>{const e=a[t];m+=e.kills,i+=e.deaths,c+=e.timeSpent,r+=e.gamesJoined,u+=e.gamesStarted,p+=e.gamesQuit,g+=e.matchesCompleted,S+=e.smashStreak,y+=e.smashtacularStreak,E+=e.smashosaurusStreak,k+=e.smashlvaniaStreak,M+=e.monsterSmashStreak,C+=e.potatoStreak,f+=e.smashSmashStreak,T+=e.potoatachioStreak,B+=e.doubleSmash,v+=e.multiSmash,I+=e.multiMegaSmash,x+=e.multiMegaUltraSmash,L+=e.gooseySmash,$+=e.crazyMultiMegaUltraSmash}))}else a.forEach((t=>{var e;m+=t.kills||0,i+=t.deaths||0,c+=(null===(e=t.playerStats)||void 0===e?void 0:e.timeSpent)||(t.endTime&&t.startTime?t.endTime-t.startTime:0)})),r=t[d("gamesJoined",l,e)]||0,u=t[d("gamesStarted",l,e)]||0,p=t[d("gamesQuit",l,e)]||0,g=t[d("matchesCompleted",l,e)]||0,a.forEach((t=>{let e=0,a=null,s=0,n={};const o=[];t.killTimestamps&&t.killTimestamps.forEach((t=>o.push({type:"kill",time:t}))),t.deathTimestamps&&t.deathTimestamps.forEach((t=>o.push({type:"death",time:t}))),o.sort(((t,e)=>t.time-e.time)),o.forEach((t=>{"death"===t.type?(e=0,n={}):"kill"===t.type&&(e++,e>=3&&!n[3]&&(S++,n[3]=!0),e>=5&&!n[5]&&(y++,n[5]=!0),e>=7&&!n[7]&&(E++,n[7]=!0),e>=10&&!n[10]&&(k++,n[10]=!0),e>=15&&!n[15]&&(M++,n[15]=!0),e>=20&&!n[20]&&(C++,n[20]=!0),e>=25&&!n[25]&&(f++,n[25]=!0),e>=30&&!n[30]&&(T++,n[30]=!0),a&&t.time-a<=3e3?(s++,2===s&&B++,3===s&&v++,4===s&&I++,5===s&&x++,6===s&&L++,7===s&&$++):s=1,a=t.time)}))}));document.getElementById("smashStreak").textContent=S,document.getElementById("smashtacularStreak").textContent=y,document.getElementById("smashosaurusStreak").textContent=E,document.getElementById("smashlvaniaStreak").textContent=k,document.getElementById("monsterSmashStreak").textContent=M,document.getElementById("potatoStreak").textContent=C,document.getElementById("smashSmashStreak").textContent=f,document.getElementById("potoatachioStreak").textContent=T,document.getElementById("doubleSmash").textContent=B,document.getElementById("multiSmash").textContent=v,document.getElementById("multiMegaSmash").textContent=I,document.getElementById("multiMegaUltraSmash").textContent=x,document.getElementById("gooseySmash").textContent=L,document.getElementById("crazyMultiMegaUltraSmash").textContent=$,document.getElementById("streaksHeader").textContent="all"===e?"All Modes Streaks (Without Dying)":"Streaks (Without Dying)",document.getElementById("quickKillsHeader").textContent="all"===e?"All Modes Streaks (Quick Kills)":"Streaks (Quick Kills)";const b=(g||0)+(p||0);document.getElementById("killsLabel").textContent="all"===e?"Total Kills":"Kills",document.getElementById("deathsLabel").textContent="all"===e?"Total Deaths":"Deaths",document.getElementById("kdrLabel").textContent="all"===e?"Overall KDR":"KDR",document.getElementById("matchesCompletedLabel").textContent="all"===e?"Total Matches Completed":"Matches Completed",document.getElementById("totalTimeSpentLabel").textContent="all"===e?"Total Time Played":"Time Played",document.getElementById("gamesJoinedLabel").textContent="all"===e?"Total Matches Joined":"Matches Joined",document.getElementById("totalMatchesLabel").textContent="Total Matches (Completed + Quit)",console.log("[SKMT][POPUP][DISPLAY] Updating gamesQuit display. Value:",p,"Element:",document.getElementById("gamesQuit")),document.getElementById("kills").textContent=m,document.getElementById("deaths").textContent=i,document.getElementById("kdr").textContent=n(m,i),document.getElementById("totalTimeSpent").textContent=o(c),document.getElementById("gamesJoined").textContent=r,document.getElementById("gamesStarted").textContent=u,document.getElementById("gamesQuit").textContent=p,document.getElementById("matchesCompleted").textContent=g,document.getElementById("totalMatches").textContent=b;const w=b,H=w>0?(g||0)/w*100:0,D=w>0?(p||0)/w*100:0;document.getElementById("matchesCompletedRate").textContent=`${H.toFixed(2)}%`,document.getElementById("matchesQuitRate").textContent=`${D.toFixed(2)}%`;const K=w>0?m/w:0,A=w>0?i/w:0,P=w>0?c/w:0;document.getElementById("avgKills").textContent=K.toFixed(2),document.getElementById("avgDeaths").textContent=A.toFixed(2),document.getElementById("avgTimeSpent").textContent=o(P),document.getElementById("averageStatsHeader").textContent="all"===e?"All Modes Average Stats":"Average Stats";const U=document.getElementById("matches-list");if(U.innerHTML="","all"===e){const e=[];["normal","special","custom"].forEach((a=>{(t[d("matchHistory",l,a)]||[]).forEach((t=>{e.push({...t,mode:a})}))})),e.sort(((t,e)=>{const a=t.matchStartTime||t.startTime||0;return(e.matchStartTime||e.startTime||0)-a})),e.forEach(((t,a)=>{var o;const l=document.createElement("div");l.className="match-card";const m=document.createElement("div");m.className="match-card-content";const i=document.createElement("div");i.className="match-meta",i.textContent=`#${e.length-a} | ${s(t.matchStartTime)} - ${s(t.matchEndTime)}`,m.appendChild(i);const d=document.createElement("div");d.className="match-stats",d.innerHTML="",d.innerHTML+=`<span>Kills:</span><b>${t.kills}</b>`,d.innerHTML+=`<span>Deaths:</span><b>${t.deaths}</b>`,d.innerHTML+=`<span>KDR:</span><b>${n(t.kills,t.deaths)}</b>`;const c=(null===(o=t.playerStats)||void 0===o?void 0:o.timeSpent)||(t.endTime&&t.startTime?t.endTime-t.startTime:0),r=Math.floor(c/36e5),u=Math.floor(c%36e5/6e4),p=Math.floor(c%6e4/1e3);let g;g=r>0?`${r}h ${u}m ${p}s`:`${u}m ${p}s`,d.innerHTML+=`<span>Duration:</span><b>${g}</b>`,m.appendChild(d);const S=document.createElement("div");S.className="match-flags";let y=[];t.joined&&y.push("Joined"),t.started&&y.push("Started"),t.quit?y.push("Quit"):y.push("Completed"),t.isSpecialMode&&y.push("Special Mode"),t.isCustomMode&&y.push("Custom Match"),y.push(`${t.mode.charAt(0).toUpperCase()+t.mode.slice(1)} Mode`),y.length>0&&(S.textContent=y.join(" | ")),m.appendChild(S);const E=document.createElement("button");E.className="trash-btn",E.title="Delete this match",E.innerHTML='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 8V15M10 8V15M14 8V15M3 5H17M8 5V3H12V5M5 5V17C5 17.5523 5.44772 18 6 18H14C14.5523 18 15 17.5523 15 17V5" stroke="#e74c3c" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>',E.onclick=()=>h(e.length-1-a,t.mode),l.appendChild(m),l.appendChild(E),U.appendChild(l)}))}else a.slice().reverse().forEach(((t,e)=>{var o;const l=document.createElement("div");l.className="match-card";const m=document.createElement("div");m.className="match-card-content";const i=document.createElement("div");i.className="match-meta",i.textContent=`#${a.length-e} | ${s(t.matchStartTime)} - ${s(t.matchEndTime)}`,m.appendChild(i);const d=document.createElement("div");d.className="match-stats",d.innerHTML="",d.innerHTML+=`<span>Kills:</span><b>${t.kills}</b>`,d.innerHTML+=`<span>Deaths:</span><b>${t.deaths}</b>`,d.innerHTML+=`<span>KDR:</span><b>${n(t.kills,t.deaths)}</b>`;const c=(null===(o=t.playerStats)||void 0===o?void 0:o.timeSpent)||(t.endTime&&t.startTime?t.endTime-t.startTime:0),r=Math.floor(c/36e5),u=Math.floor(c%36e5/6e4),p=Math.floor(c%6e4/1e3);let g;g=r>0?`${r}h ${u}m ${p}s`:`${u}m ${p}s`,d.innerHTML+=`<span>Duration:</span><b>${g}</b>`,m.appendChild(d);const S=document.createElement("div");S.className="match-flags";let y=[];t.joined&&y.push("Joined"),t.started&&y.push("Started"),t.quit?y.push("Quit"):y.push("Completed"),t.isSpecialMode&&y.push("Special Mode"),t.isCustomMode&&y.push("Custom Match"),y.length>0&&(S.textContent=y.join(" | ")),m.appendChild(S);const E=document.createElement("button");E.className="trash-btn",E.title="Delete this match",E.innerHTML='<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 8V15M10 8V15M14 8V15M3 5H17M8 5V3H12V5M5 5V17C5 17.5523 5.44772 18 6 18H14C14.5523 18 15 17.5523 15 17V5" stroke="#e74c3c" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>',E.onclick=()=>h(a.length-1-e),l.appendChild(m),l.appendChild(E),U.appendChild(l)}))}(t,m)}))}))}function h(t,e){chrome.storage.sync.get(["currentSkid"],(a=>{const s=a.currentSkid||"Default",n=e||m;if("all"===m&&!e)return void console.warn("[SKMT][DELETE] Cannot delete individual match in All Stats mode without mode specified.");const o=d("matchHistory",s,n);chrome.storage.sync.get([o],(e=>{let a=e[o]||[];if(t<0||t>=a.length)return;a.splice(t,1)[0];let l=0,m=0,i=0,c=0,h=0,u=0;a.forEach((t=>{l+=t.kills||0,m+=t.deaths||0,t.joined&&i++,t.started&&c++,t.quit&&h++,"special"===n&&t.isSpecialMode&&!t.quit&&u++,"normal"!==n||t.isSpecialMode||t.isCustomMode||t.quit||u++,"custom"===n&&t.isCustomMode&&!t.quit&&u++}));const p={};p[d("matchHistory",s,n)]=a,p[d("gamesJoined",s,n)]=i,p[d("gamesStarted",s,n)]=c,p[d("gamesQuit",s,n)]=h,p[d("matchesCompleted",s,n)]=u,chrome.storage.sync.set(p,r)}))}))}async function u(t){const e=(new TextEncoder).encode(JSON.stringify(t)),a=await crypto.subtle.digest("SHA-256",e);return Array.from(new Uint8Array(a)).map((t=>t.toString(16).padStart(2,"0"))).join("")}document.addEventListener("DOMContentLoaded",(()=>{document.getElementById("normalModeBtn").addEventListener("click",(()=>{m="normal",c(),r()})),document.getElementById("specialModeBtn").addEventListener("click",(()=>{m="special",c(),r()})),document.getElementById("customModeBtn").addEventListener("click",(()=>{m="custom",c(),r()})),document.getElementById("allStatsBtn").addEventListener("click",(()=>{m="all",c(),r()})),c(),r(),document.querySelectorAll(".stats-details").forEach((t=>{t.addEventListener("toggle",(()=>{document.querySelectorAll(".stats-details").forEach((t=>{const e=t.querySelector(".stats-section-label").id;i[e]=t.hasAttribute("open")})),chrome.storage.local.set({openSections:i})}))})),chrome.storage.local.get(["openSections"],(t=>{t.openSections&&(i=t.openSections,Object.entries(i).forEach((([t,e])=>{const a=document.querySelector(`.stats-details:has(#${t})`);a&&(e?a.setAttribute("open",""):a.removeAttribute("open"))})))})),r()})),chrome.storage.onChanged.addListener(((t,e)=>{"sync"===e&&l&&Object.keys(t).some((t=>t.includes(`_${l}_`)))&&r()})),document.getElementById("resetStatsBtn").addEventListener("click",(function(){if(!l)return;const t=[],e="all"===m?["normal","special","custom"]:[m];if(confirm(`Are you sure you want to reset all stats and match history for ${"all"===m?"all modes":"this mode"} and SKID?`)){e.forEach((e=>{t.push(d("matchHistory",l,e)),t.push(d("gamesJoined",l,e)),t.push(d("gamesStarted",l,e)),t.push(d("gamesQuit",l,e)),t.push(d("matchesCompleted",l,e))}));const a={};t.forEach((t=>a[t]=t.includes("matchHistory")?[]:0)),chrome.storage.sync.set(a,(()=>{console.log("[SKMT][RESET] Stats reset for",e,"mode(s)."),r()}))}})),chrome.runtime.onMessage.addListener((function(t,e,a){if("SKMT_SKID_UPDATED"===t.type)r();else if("SKMT_MATCH_COMPLETE"===t.type){console.log("[SKMT][POPUP] Received MATCH_COMPLETE message:",t.data);const e=t.data,a=e.isSpecialMode?"special":e.isCustomMode?"custom":"normal",s=l||"Default",n=d("matchHistory",s,a),o=d("gamesJoined",s,a),m=d("gamesStarted",s,a),i=d("gamesQuit",s,a),c=d("matchesCompleted",s,a);chrome.storage.sync.get([n,o,m,i,c],(t=>{let s=t[n]||[],l=t[o]||0,d=t[m]||0,h=t[i]||0,u=t[c]||0;console.log(`[SKMT][POPUP] Before update - Mode: ${a}, Games Joined: ${l}, Games Started: ${d}, Games Quit: ${h}, Matches Completed: ${u}`),s.push(e),e.joined&&l++,e.started&&d++,e.quit&&h++,e.quit||u++,console.log(`[SKMT][POPUP] After update - Mode: ${a}, Games Joined: ${l}, Games Started: ${d}, Games Quit: ${h}, Matches Completed: ${u}`);const p={};p[n]=s,p[o]=l,p[m]=d,p[i]=h,p[c]=u,chrome.storage.sync.set(p,(()=>{console.log(`[SKMT][POPUP] Saved match data and updated stats for ${a} mode.`),r()}))}))}})),document.getElementById("exportStatsBtn").addEventListener("click",(async function(){try{const t=["normal","special","custom"],e=["currentSkid"];t.forEach((t=>{e.push(d("matchHistory",l,t)),e.push(d("gamesJoined",l,t)),e.push(d("gamesStarted",l,t)),e.push(d("gamesQuit",l,t)),e.push(d("matchesCompleted",l,t))}));const a=await new Promise((t=>{chrome.storage.sync.get(e,t)})),s={};t.forEach((t=>{const e=a[d("matchHistory",l,t)]||[];let n=0,o=0,m=0,i=0,c=0,r=0,h=0,u=0,p=0,g=0,S=0,y=0,E=0,k=0;e.forEach((t=>{if(t.kills>=3&&n++,t.kills>=5&&o++,t.kills>=7&&m++,t.kills>=10&&i++,t.kills>=15&&c++,t.kills>=20&&r++,t.kills>=25&&h++,t.kills>=30&&u++,t.killTimestamps&&t.killTimestamps.length>0){let e=1,a=t.killTimestamps[0];for(let s=1;s<t.killTimestamps.length;s++){const n=t.killTimestamps[s];n-a<=3e3?(e++,2===e&&p++,3===e&&g++,4===e&&S++,5===e&&y++,6===e&&E++,7===e&&k++):e=1,a=n}}})),s[t]={smashStreak:n,smashtacularStreak:o,smashosaurusStreak:m,smashlvaniaStreak:i,monsterSmashStreak:c,potatoStreak:r,smashSmashStreak:h,potoatachioStreak:u,doubleSmash:p,multiSmash:g,multiMegaSmash:S,multiMegaUltraSmash:y,gooseySmash:E,crazyMultiMegaUltraSmash:k}})),a.streaks=s;const n=await u(a),o={version:"1.2",timestamp:Date.now(),skid:l,hash:n,data:a},m=(new TextEncoder).encode(JSON.stringify(o)),i=new Blob([m],{type:"application/octet-stream"}),c=URL.createObjectURL(i),r=document.createElement("a");r.href=c,r.download=`smash_karts_stats_${l}_${(new Date).toISOString().split("T")[0]}.skmt`,document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(c)}catch(t){console.error("Error exporting stats:",t),alert("Failed to export stats. Please try again.")}})),document.getElementById("importStatsBtn").addEventListener("click",(()=>{document.getElementById("importStatsInput").click()})),document.getElementById("importStatsInput").addEventListener("change",(t=>{t.target.files.length>0&&(async function(t){try{const e=new FileReader;e.onload=async function(t){try{const e=(new TextDecoder).decode(t.target.result),a=JSON.parse(e);if(!["1.0","1.1","1.2"].includes(a.version))throw new Error("Unsupported stats file version");if(a.skid!==l)throw new Error("Stats file SKID does not match current SKID");if(await u(a.data)!==a.hash)throw new Error("Stats file has been tampered with");if(!confirm("Are you sure you want to import these stats? This will overwrite your current stats."))return;await new Promise((t=>{chrome.storage.sync.set(a.data,t)})),r(),alert("Stats imported successfully!")}catch(t){console.error("Error processing imported stats:",t),alert(t.message||"Failed to import stats. The file may be corrupted or invalid.")}},e.onerror=function(){alert("Error reading file. Please try again.")},e.readAsArrayBuffer(t)}catch(t){console.error("Error importing stats:",t),alert("Failed to import stats. Please try again.")}}(t.target.files[0]),t.target.value="")}))})();