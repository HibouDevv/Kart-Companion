console.log("[SKMT] Injected script running"),window.addEventListener("message",(function(t){t.data&&"object"==typeof t.data&&console.log("[SKMT][INJECTED] Received message:",t.data)}));const originalLog=console.log,originalInfo=console.info,originalWarn=console.warn,originalError=console.error;let isIntercepting=!1;window.kartStats={kills:0,deaths:0,matchActive:!1,matchStartTime:null,matchEndTime:null,isSpecialMode:!1,isCustomMode:!1,joined:!1,started:!1,quit:!1,awaitingStartType:!0,_pendingGameEnd:!1,_successLogCount:0,_gameEndTimeout:null,skid:null,killTimestamps:[],deathTimestamps:[],sawJoinedRoom:!1,sawStartGame:!1,killStreak:0,joinedFirst:null,players:[],currentMap:null};let collectingPlayerLogs=!1,currentPlayerLogLines=[],currentMatchPlayers=new Set,collectingPlayers=!1,detectedPlayersSet=new Set;function setSkid(t){t&&"string"==typeof t&&t.length>5&&(window.kartStats.skid=t,originalLog("[SKMT] SKID set:",t),window.postMessage({type:"SKMT_SKID_UPDATED",skid:t},"*"))}function interceptConsole(t,e){return function(...t){if(isIntercepting)return e.apply(console,t);if(t[0]&&"string"==typeof t[0]){isIntercepting=!0;const e=t[0].toLowerCase();if(e.includes("authstatechanged, uid:")){const e=t[0].match(/uid:\s*([^,\s]+)/i);e&&e[1]&&setSkid(e[1].trim())}if((e.includes("bytebrew: sending custom event: play_special_mode")||e.includes("bytebrew: sending custom event: play_special_mode_rules")||e.includes("bytebrew: sending custom event: play_special_mode_arena"))&&(window.kartStats.isSpecialMode=!0,window.kartStats.isCustomMode=!1,originalLog("[SKMT] Mode: Special mode detected")),(e.includes("bytebrew: sending custom event: create_game_rules")||e.includes("bytebrew: sending custom event: create_game_weapons")||e.includes("bytebrew: sending custom event: create_game_level")||e.includes("bytebrew: sending custom event: create_game_mode")||e.includes("bytebrew: sending custom event: join_or_create_private_mode")||e.includes("bytebrew: sending custom event: join_or_create_private_arena"))&&(window.kartStats.isCustomMode=!0,window.kartStats.isSpecialMode=!1,originalLog("[SKMT] Mode: Custom mode detected")),e.includes("Vehicle Setup: VehicleCharacter - setting new head position -")||e.includes("Vehicle Setup: VehicleCharacter - setting original head position -")){const e=t[0].match(/Vehicle Setup: VehicleCharacter - setting (?:new|original) head position - ([^\n]+)/);if(e&&e[1]){const t=e[1].trim();window.kartStats.matchActive&&(currentMatchPlayers.add(t),originalLog("[SKMT] Player detected:",t))}}if(e.includes("bytebrew: sending custom event: start_game")&&(window.kartStats.joined||(window.kartStats.started=!0),window.kartStats.matchActive=!0,window.kartStats.matchStartTime=Date.now(),currentMatchPlayers.clear(),originalLog("[SKMT] Match started"),window.postMessage({type:"SKMT_STATUS_UPDATE",status:"started"},"*")),e.includes("bytebrew: sending custom event: joined_room")&&(window.kartStats.joined=!0,window.kartStats.started=!1,window.kartStats.matchActive=!0,window.kartStats.matchStartTime=Date.now(),currentMatchPlayers.clear(),originalLog("[SKMT] Joined match"),window.postMessage({type:"SKMT_STATUS_UPDATE",status:"joined"},"*")),(e.includes("bytebrew: sending custom event: start_game")||e.includes("bytebrew: sending custom event: joined_room"))&&(collectingPlayers=!0,detectedPlayersSet.clear(),originalLog("[SKMT] Player collection started")),(e.includes("bytebrew: sending custom event: game_end")||e.includes("bytebrew: sending custom event: confirmexitgame"))&&(collectingPlayers=!1,originalLog("[SKMT] Player collection ended. Final players:",Array.from(detectedPlayersSet))),collectingPlayers&&(e.includes("vehicle setup: vehiclecharacter - setting new head position -")||e.includes("vehicle setup: vehiclecharacter - setting original head position -"))){const e=t[0].match(/Vehicle Setup: VehicleCharacter - setting (?:new|original) head position - ([^\n]+)/);if(e&&e[1]){const t=e[1].trim();detectedPlayersSet.add(t),originalLog("[SKMT] Player detected (real-time):",t)}}if(e.includes("[unitycache]")&&e.includes("assetbundles/remote/webgl/")&&e.includes("_scenes_all_")){const e=t[0].match(/assetbundles\/remote\/webgl\/([^_]+)-v1/);if(e&&e[1]){let t=e[1];t=t.replace("smashislandscene","Smash Island").replace("dinoisland","Dino Island").replace("graveyardscene","Graveyard/Graveyard CTF").replace("lavapitscene","Lava Pit/Lava Pit CTF").replace("skatepark","Skate Park").replace("skyarenadropzonepinball","Sky Arena Dropzone/Sky Arena Pinball").replace("skyarenashowdownscene","Sky Arena Showdown").replace("skyarenatemples","Sky Arena Temples").replace("skyarenatunnels","Sky Arena Tunnels").replace("slicknslidescene","Slick n' Slide").replace("smashfortscene","Smash Fort/Smash Fort CTF").replace("snowpark","Snow Shrine/Snowpark/Snowpark CTF").replace("spacestationscene","Space Station(s)").replace("stekysspeedwayscene","Steky's Speedway").replace("thegravelpitscene","Gravel Pit").replace("theoldgraveyard","Old Graveyard"),window.kartStats.currentMap=t,originalLog("[SKMT] Map detected:",t)}}if((e.includes("bytebrew: sending custom event: game_end")||e.includes("bytebrew: sending custom event: confirmexitgame"))&&window.kartStats.matchActive){window.kartStats.matchEndTime=Date.now(),window.kartStats.matchActive=!1,e.includes("confirmexitgame")&&(window.kartStats.quit=!0,originalLog("[SKMT] Match quit detected"));const t=window.kartStats.matchEndTime-window.kartStats.matchStartTime,a={kills:window.kartStats.kills,deaths:window.kartStats.deaths,matchStartTime:window.kartStats.matchStartTime,matchEndTime:window.kartStats.matchEndTime,duration:t,isSpecialMode:window.kartStats.isSpecialMode,isCustomMode:window.kartStats.isCustomMode,joined:window.kartStats.joined,started:window.kartStats.started,quit:window.kartStats.quit,killTimestamps:[...window.kartStats.killTimestamps],deathTimestamps:[...window.kartStats.deathTimestamps],players:Array.from(detectedPlayersSet),map:window.kartStats.currentMap};originalLog("[SKMT] Match stats:",{kills:a.kills,deaths:a.deaths,killStreak:window.kartStats.killStreak,mode:a.isCustomMode?"custom":a.isSpecialMode?"special":"normal",joined:a.joined,started:a.started,quit:a.quit,duration:t,players:Array.from(detectedPlayersSet)}),window.postMessage({type:"SKMT_MATCH_COMPLETE",data:a},"*"),console.log("[SKMT] Match ended with players:",Array.from(detectedPlayersSet)),resetStats(),detectedPlayersSet.clear()}if(e.includes("bytebrew: sending custom event: loading_unity_awake")&&window.kartStats.matchActive){window.kartStats.quit=!0,window.kartStats.matchEndTime=Date.now();const t={kills:window.kartStats.kills,deaths:window.kartStats.deaths,matchStartTime:window.kartStats.matchStartTime,matchEndTime:window.kartStats.matchEndTime,duration:window.kartStats.matchEndTime-window.kartStats.matchStartTime,isSpecialMode:window.kartStats.isSpecialMode,isCustomMode:window.kartStats.isCustomMode,joined:window.kartStats.joined,started:window.kartStats.started,quit:!0,killTimestamps:[...window.kartStats.killTimestamps],deathTimestamps:[...window.kartStats.deathTimestamps],players:Array.from(detectedPlayersSet)};window.postMessage({type:"SKMT_MATCH_COMPLETE",data:t},"*"),window.kartStats.isSpecialMode=!1,window.kartStats.isCustomMode=!1,resetStats(),detectedPlayersSet.clear(),originalLog("[SKMT] Game exit detected - modes reset")}if(window.kartStats.matchActive){if(e.includes("destroyed_human")){window.kartStats.kills++,window.kartStats.killTimestamps.push(Date.now()),window.kartStats.killStreak++,originalLog("[SKMT] HUD: Kill streak updated to",window.kartStats.killStreak),window.postMessage({type:"SKMT_KILLSTREAK_UPDATE",killStreak:window.kartStats.killStreak},"*");const t=window.kartStats.deaths>0?window.kartStats.kills/window.kartStats.deaths:window.kartStats.kills;window.postMessage({type:"SKMT_KDR_UPDATE",kdr:t},"*")}if(e.includes("destroyed_by_human")||e.includes("destroyed_by_bot")){window.kartStats.deaths++,window.kartStats.deathTimestamps.push(Date.now()),window.kartStats.killStreak=0,originalLog("[SKMT] HUD: Deaths updated to",window.kartStats.deaths),window.postMessage({type:"SKMT_DEATHS_UPDATE",deaths:window.kartStats.deaths},"*"),window.postMessage({type:"SKMT_KILLSTREAK_UPDATE",killStreak:0},"*");const t=window.kartStats.deaths>0?window.kartStats.kills/window.kartStats.deaths:window.kartStats.kills;window.postMessage({type:"SKMT_KDR_UPDATE",kdr:t},"*")}}isIntercepting=!1}return e.apply(console,t)}}function resetStats(){window.kartStats.kills=0,window.kartStats.deaths=0,window.kartStats.matchActive=!1,window.kartStats.matchStartTime=null,window.kartStats.matchEndTime=null,window.kartStats.killStreak=0,window.kartStats.joinedFirst=null,window.kartStats.joined=!1,window.kartStats.started=!1,window.kartStats.quit=!1,window.kartStats._pendingGameEnd=!1,window.kartStats._successLogCount=0,window.kartStats.killTimestamps=[],window.kartStats.deathTimestamps=[],window.kartStats.sawJoinedRoom=!1,window.kartStats.sawStartGame=!1,window.kartStats.awaitingStartType=!0,window.kartStats.players=[],window.kartStats.isSpecialMode=!1,window.kartStats.isCustomMode=!1,window.kartStats._gameEndTimeout&&clearTimeout(window.kartStats._gameEndTimeout),window.kartStats._gameEndTimeout=null}console.log=interceptConsole("log",originalLog),console.info=interceptConsole("info",originalInfo),console.warn=interceptConsole("warn",originalWarn),console.error=interceptConsole("error",originalError);